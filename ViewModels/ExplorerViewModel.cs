using AsyncAwaitBestPractices;
using Kit.Extensions;
using Kit.Model;
using MalwareAdmin.Data;
using MalwareAdmin.Models.Files;
using System.Collections.ObjectModel;
using System.Threading.Tasks;


namespace MalwareAdmin.ViewModels
{
    public class ExplorerViewModel : ModelBase
    {
        public Command<FolderObject> OnItemExpandedCommand { get; set; }
        public Command<ObjectExplorer> OnItemSelectedCommand { get; set; }
        public ObservableCollection<ObjectExplorer> SamplesFolders { get; set; }
        public ExplorerViewModel()
        {
            OnItemExpandedCommand = new Command<FolderObject>(OnItemExpanded);
            OnItemSelectedCommand = new Command<ObjectExplorer>(OnItemSelected);
            SamplesFolders = new ObservableCollection<ObjectExplorer>();
            if (!Kit.WPF.ToolsImplementation.IsInDesingMode)
            {
                SamplesFolders.Add(new FolderObject(AppData.SamplesFolder));
            }
            Load().SafeFireAndForget();
        }

        private void OnItemSelected(ObjectExplorer item)
        {
            ////TreeView tree = (TreeView)sender;
            ////TreeViewItem temp = ((TreeViewItem)tree.SelectedItem);

            //if (item == null)
            //    return;
            //SelectedImagePath = "";
            //string temp1 = "";
            //string temp2 = "";
            //while (true)
            //{
            //    temp1 = item.Header.ToString();
            //    if (temp1.Contains(@"\"))
            //    {
            //        temp2 = "";
            //    }
            //    SelectedImagePath = temp1 + temp2 + SelectedImagePath;
            //    if (item.Parent.GetType().Equals(typeof(TreeView)))
            //    {
            //        break;
            //    }
            //    item = ((TreeViewItem)item.Parent);
            //    temp2 = @"\";
            //}
            ////show user selected path
            //MessageBox.Show(SelectedImagePath);
        }
        private void OnItemExpanded(FolderObject folder)
        {
            //if (item.Items.Count == 1 && item.Items[0] == dummyNode)
            //{
            //    item.Items.Clear();
            //    try
            //    {
            //        foreach (string s in Directory.GetDirectories(item.Tag.ToString()))
            //        {
            //            TreeViewItem subitem = new TreeViewItem();
            //            subitem.Header = s.Substring(s.LastIndexOf("\\") + 1);
            //            subitem.Tag = s;
            //            subitem.FontWeight = FontWeights.Normal;
            //            subitem.Items.Add(dummyNode);

            //            subitem.Expanded += new RoutedEventHandler(folder_Expanded);
            //            item.Items.Add(subitem);
            //        }
            //    }
            //    catch (Exception) { }
            //}
        }
        public async Task Load()
        {
            await Task.Yield();
            foreach (FolderObject samplesFolder in SamplesFolders)
            {
                await samplesFolder.GetChilds();
            }
        }
    }
}
