using AsyncAwaitBestPractices;
using Kit;
using Kit.Model;
using MalwareAdmin.Data;
using MalwareAdmin.Models.Files;
using MalwareAdmin.Views;
using System.Collections.ObjectModel;
using System.Threading.Tasks;

namespace MalwareAdmin.ViewModels
{
    public class ExplorerViewModel : ModelBase
    {
        public ObservableCollection<ObjectExplorer> SamplesFolders { get; set; }
        private FileObject _SelectedFile;
        public FileObject SelectedFile
        {
            get => _SelectedFile;
            set
            {
                _SelectedFile = value;
                Raise(() => SelectedFile);
                Kit.Tools.Container.Get<FileMainView>().File = value;
            }
        }
        public ExplorerViewModel()
        {
            Kit.Tools.Container?.Register<ExplorerViewModel>(this);
            SamplesFolders = new ObservableCollection<ObjectExplorer>();
            SamplesFolders.Add(new FolderObject(AppData.SamplesFolder));
            Load().SafeFireAndForget();
        }

        public async Task Load()
        {
            await Task.Yield();
            foreach (FolderObject samplesFolder in SamplesFolders)
            {
                await samplesFolder.GetChilds();
            }
        }
    }
}
