using Kit.Razor.Interfaces;
using MalwareAdmin.Models;
using ConsoleColor = System.ConsoleColor;

namespace MalwareAdmin.ViewModels
{
    public class CommandLineViewModel : List<ConsoleOutput>
    {
        public static CommandLineViewModel BinBash => _BinBash.Value;
        private static readonly Lazy<CommandLineViewModel> _BinBash = new Lazy<CommandLineViewModel>(() => new CommandLineViewModel("Terminal", ConsoleColor.DarkMagenta, ConsoleColor.White));

        public static CommandLineViewModel Viper => _Viper.Value;
        private static readonly Lazy<CommandLineViewModel> _Viper = new Lazy<CommandLineViewModel>(() => new CommandLineViewModel("Viper", ConsoleColor.Black, ConsoleColor.Green));

        public static CommandLineViewModel Cuckoos => _Cuckoos.Value;
        private static readonly Lazy<CommandLineViewModel> _Cuckoos = new Lazy<CommandLineViewModel>(() => new CommandLineViewModel("Cuckoos", ConsoleColor.Black, ConsoleColor.Cyan));

        public static CommandLineViewModel FakeNet => _FakeNet.Value;
        private static readonly Lazy<CommandLineViewModel> _FakeNet = new Lazy<CommandLineViewModel>(() => new CommandLineViewModel("FakeNet", ConsoleColor.Gray, ConsoleColor.Cyan));




        public IStateHasChanged StateHasChanged;
        public string Command { get; set; }
        public string Title { get; set; }
        public ConsoleColor BackgroundColor { get; set; }
        public ConsoleColor TextColor { get; set; }
        public CommandLineViewModel(string title, ConsoleColor backgroundColor, ConsoleColor textColor)
        {
            Title = title;
            BackgroundColor = backgroundColor;
            TextColor = textColor;
        }

        public void SendCommand()
        {
            Command = Command.Trim();
            if (!string.IsNullOrEmpty(Command))
            {
                Log(Command);
            }
            Command = string.Empty;
        }
        public void Log(string text, bool isError = false)
        {
            foreach (string line in text.Split('\n'))
            {
                Log(new ConsoleOutput()
                {
                    Text = line,
                    IsError = isError
                });
            }
        }
        private void Log(ConsoleOutput consoleOutput)
        {
            Console.ForegroundColor = consoleOutput.IsError ? ConsoleColor.DarkRed : this.TextColor;
            Console.BackgroundColor = this.BackgroundColor;
            Console.WriteLine(consoleOutput.Text);
            Add(consoleOutput);
            if (Count > 50)
            {
                foreach (var output in this.Take(10))
                {
                    Remove(output);
                }
                return;
            }
            StateHasChanged?.Refresh();
        }

        public override string ToString()
        {
            return this.Title;
        }
    }
}
