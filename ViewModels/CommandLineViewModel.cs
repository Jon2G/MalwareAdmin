using AsyncAwaitBestPractices;
using Kit;
using Kit.Model;
using MalwareAdmin.Models;
using System;
using System.Collections.ObjectModel;
using System.Linq;

namespace MalwareAdmin.ViewModels
{
    public class CommandLineViewModel : ModelBase
    {
        private int CollectionCount;
        public ObservableCollection<ConsoleOutput> ConsoleOutputs { get; set; }
        private readonly Action ScrollToBottom;
        public CommandLineViewModel(Action scrollToBottom)
        {
            ScrollToBottom = scrollToBottom;
            ConsoleOutputs = new ObservableCollection<ConsoleOutput>();
            Tools.Container.Register(this);
        }

        public void Log(string text, bool isError = false)
        {
            Log(new ConsoleOutput()
            {
                Text = text,
                IsError = isError
            });
        }

        private void Log(ConsoleOutput consoleOutput)
        {
            CollectionCount++;
            if (CollectionCount > 50)
            {
                CollectionCount = 40;
                App.Current.Dispatcher.BeginInvoke(() =>
                {
                    foreach (var output in ConsoleOutputs.Take(10))
                    {
                        ConsoleOutputs.RemoveAsync(output);
                    }
                }).Task.SafeFireAndForget();
                return;
            }
            ConsoleOutputs.AddAsync(consoleOutput).Task
                .ContinueWith(t =>
                {
                    App.Current.Dispatcher.Invoke(ScrollToBottom);
                })
                .SafeFireAndForget();
        }
    }
}
