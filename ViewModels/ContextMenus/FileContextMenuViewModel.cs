using AsyncAwaitBestPractices.MVVM;
using Kit.Extensions;
using Kit.Model;
using MalwareAdmin.Models.Files;
using System;
using System.Diagnostics;
using System.Threading.Tasks;

namespace MalwareAdmin.ViewModels
{
    public class FileContextMenuViewModel : ModelBase
    {
        public Command<FileObject> DeleteCommand { get; set; }
        public Command<ZipFileObject> UnCompressCommand { get; set; }
        public Command<FileObject> ShowInExplorerCommand { get; set; }
        public Command<FileObject> ShowInViperCommand { get; set; }
        public AsyncCommand<FileObject> DownloadFromVTCommand { get; set; }
        private FileObject _File;
        public FileObject File
        {
            get => _File;
            set
            {
                RaiseIfChanged(ref _File, value);
                Raise(() => IsZip);
            }
        }

        public bool IsZip => File is ZipFileObject;
        public FileContextMenuViewModel(FileObject file = null)
        {
            File = file;
            DeleteCommand = new Command<FileObject>(Delete);
            UnCompressCommand = new Command<ZipFileObject>(UnCompress);
            ShowInExplorerCommand = new Command<FileObject>(ShowInExplorer);
            DownloadFromVTCommand = new AsyncCommand<FileObject>(DownloadFromVT);
            ShowInViperCommand = new Command<FileObject>(ShowInViper);
        }

        private void ShowInViper(FileObject file)
        {
            if (string.IsNullOrEmpty(file.AnalysisData?.VTotalReport?.SHA256))
            {
                return;
            }
            Uri uri = new Uri($"http://localhost:8080/project/default/file/{file.AnalysisData.VTotalReport.SHA256}");
            Process.Start(new ProcessStartInfo()
            {
                FileName = uri.AbsoluteUri,
                UseShellExecute = true,
                CreateNoWindow = true
            });
        }
        private async Task DownloadFromVT(FileObject file)
        {
            await Task.Yield();
            await file?.DownloadReportFromVT();
        }
        private void ShowInExplorer(FileObject file)
        {
            file.Parent.ShowInExplorer();
        }
        private void UnCompress(ZipFileObject file)
        {
            file.UnCompress();
        }
        private void Delete(FileObject file)
        {
            file?.Delete();
        }

    }
}
