using Kit;
using System.Diagnostics;
using System.Text;

namespace MalwareAdmin.Utils
{
    public class ProcessContoller
    {
        private readonly Process Process;
        private StreamReader Reader => Process.StandardOutput;
        private StreamWriter Writer => Process.StandardInput;
        public string OutputData { get; private set; }
        public ProcessContoller(Process process)
        {
            this.Process = process;
            this.Writer.AutoFlush = false;
            this.Process.OutputDataReceived += (s, e) => OutputDataReceived(s, e, false);
            this.Process.ErrorDataReceived += (s, e) => OutputDataReceived(s, e, true);
        }
        private void OutputDataReceived(object sender, DataReceivedEventArgs e, bool isError)
        {
            if (string.IsNullOrEmpty(e.Data)) return;
            string data = e.Data.Replace("\0", string.Empty)?.Trim();
            if (string.IsNullOrEmpty(data)) return;
            if (data.StartsWith("Microsoft Windows") || data.Contains("Microsoft Corporation") ||
                data.Contains("PowerShell") || data == "viper >")
            {
                return;
            }
            Console.Write(data);
            //cmdLog.Log(data, isError);
            //sb.AppendLine(data);
        }

        internal static ProcessContoller Start(string file)
        {
            try
            {
                Console.WriteLine("Run process:{0}", arg: file);
                var p = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = file,
                        CreateNoWindow = true,
                        WindowStyle = ProcessWindowStyle.Hidden,
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardInput = true,
                        RedirectStandardError = true,
                        ErrorDialog = false,
                        StandardErrorEncoding = Encoding.ASCII,
                        StandardInputEncoding = Encoding.ASCII,
                        StandardOutputEncoding = Encoding.ASCII,
                    }
                };
                p.Start();
                return new ProcessContoller(p);
            }
            catch (Exception ex)
            {
                Log.Logger.Error(ex, "Start");
            }

            return null;
        }

        internal async Task Write(char command)
        {
            Console.WriteLine("Write:{0}", arg: command);
            await Writer.WriteAsync(command);
        }
        internal async Task WriteLine(string command)
        {
            Console.WriteLine("WriteLine:{0}", arg: command);
            await Writer.WriteAsync($"{command}\n\r");
            await Writer.FlushAsync();
        }

        public void Close()
        {
            Writer.Flush();
            Writer.Close();
            Process.WaitForExit();
            var x = new char[1];
            Reader.Read(x, 0, 1);
            OutputData = Reader.ReadToEnd();
            Console.WriteLine(OutputData);
        }
    }
}
