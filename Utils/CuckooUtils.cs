using AsyncAwaitBestPractices;
using Cuckoo.Net;
using Cuckoo.Net.Internal;
using Cuckoo.Net.ResponseModels;
using MalwareAdmin.Models.Files;

namespace MalwareAdmin.Utils
{
    public static class CuckooUtils
    {
        public const string PORT = "1337";
        public static CuckooAPI API => _API.Value;
        private static readonly Lazy<CuckooAPI> _API = new Lazy<CuckooAPI>(new CuckooAPI($"http://{Kit.IPAddressExtensions.GetLocalIPAddress()}:{CuckooUtils.PORT}", "jon2g"));
        //private static readonly Lazy<CuckooAPI> _API = new Lazy<CuckooAPI>(new CuckooAPI($"http://172.29.136.78:{CuckooUtils.PORT}", "jon2g"));
        public static CuckooTask[] Tasks { get; set; }
        static CuckooUtils()
        {
            Tasks = Array.Empty<CuckooTask>();
        }
        internal static async Task AddSample(FileObject file)
        {
            await Task.Yield();
            Response<CreateSubmitResponse> response = await API.Tasks.CreateSubmit(file.File);
            if (response.Ok)
            {
                GetTasks().SafeFireAndForget();
            }
        }

        public static async Task<IEnumerable<CuckooTask>> GetTasks()
        {
            var response = await API.Tasks.List();
            if (response.Ok)
            {
                Tasks = response.Content.Tasks.OrderByDescending(x => x.Id).ToArray();
            }
            return Tasks;
        }

        public static async Task<CuckooReport> GetReport(CuckooTask task)
        {
            Response<CuckooReport> response = await API.Tasks.Report(task.Id);
            if (response.Ok)
            {
                return response.Content;
            }
            return null;
        }
    }
}
