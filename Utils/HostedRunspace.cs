using System;
using System.IO;
using System.Linq;
using System.Management.Automation;
using System.Management.Automation.Runspaces;

namespace MalwareAdmin.Utils
{
    /// <summary>
    /// Contains functionality for executing PowerShell scripts.
    /// </summary>
    public class HostedRunspace
    {
        /// <summary>
        /// The PowerShell runspace pool.
        /// </summary>
        private RunspacePool RsPool { get; set; }

        /// <summary>
        /// Initialize the runspace pool.
        /// </summary>
        /// <param name="minRunspaces"></param>
        /// <param name="maxRunspaces"></param>
        public void InitializeRunspaces(int minRunspaces, int maxRunspaces, string[] modulesToLoad)
        {
            // create the default session state.
            // session state can be used to set things like execution policy, language constraints, etc.
            // optionally load any modules (by name) that were supplied.

            var defaultSessionState = InitialSessionState.CreateDefault();
            defaultSessionState.ExecutionPolicy = Microsoft.PowerShell.ExecutionPolicy.Unrestricted;

            if (modulesToLoad is not null)
                foreach (var moduleName in modulesToLoad)
                {
                    defaultSessionState.ImportPSModule(moduleName);
                }

            // use the runspace factory to create a pool of runspaces
            // with a minimum and maximum number of runspaces to maintain.

            RsPool = RunspaceFactory.CreateRunspacePool(defaultSessionState);
            RsPool.SetMinRunspaces(minRunspaces);
            RsPool.SetMaxRunspaces(maxRunspaces);

            // set the pool options for thread use.
            // we can throw away or re-use the threads depending on the usage scenario.

            RsPool.ThreadOptions = PSThreadOptions.UseNewThread;

            // open the pool. 
            // this will start by initializing the minimum number of runspaces.

            RsPool.Open();
        }

        /// <summary>
        /// Runs a PowerShell script with parameters and prints the resulting pipeline objects to the console output. 
        /// </summary>
        /// <param name="scriptContents">The script file contents.</param>
        /// <param name="scriptParameters">A dictionary of parameter names and parameter values.</param>
        public string RunScript(params string[] commands)
        {
            if (RsPool == null)
            {
                throw new ApplicationException("Runspace Pool must be initialized before calling RunScript().");
            }

            // create a new hosted PowerShell instance using a custom runspace.
            // wrap in a using statement to ensure resources are cleaned up.

            using (PowerShell ps = PowerShell.Create())
            {
                // use the runspace pool.
                ps.RunspacePool = RsPool;



                // specify the parameters to pass into the script.
                //ps.AddParameters(scriptParameters);

                // subscribe to events from some of the streams
                ps.Streams.Error.DataAdded += Error_DataAdded;
                ps.Streams.Warning.DataAdded += Warning_DataAdded;
                ps.Streams.Information.DataAdded += Information_DataAdded;


                ps.AddCommand("Start-Process");
                ps.AddArgument("WSL");
                ps.AddParameter("-PassThru");
                ps.AddParameter("-RedirectStandardOutput", "output.txt");
                ps.AddParameter("--RedirectStandardError", "error.txt");
                ps.AddParameter("-Wait");
                ps.AddParameter("-RedirectStandardInput");
                ps.AddArgument(string.Join(";", commands));
                var results = ps.Invoke();
                if (results.Any())
                {
                    string result = String.Empty;
                    FileInfo resultfile = new FileInfo("output.txt");
                    if (resultfile.Exists)
                    {
                        result += File.ReadAllText("output.txt");
                        File.WriteAllText("output.txt", "");
                    }
                    FileInfo errorfile = new FileInfo("error.txt");
                    if (errorfile.Exists)
                    {
                        result += File.ReadAllText("error.txt");
                        File.WriteAllText("error.txt", "");
                    }
                    return result;
                }


                //ps.AddParameter("-NoNewWindow");

                return string.Empty;
                //// specify the script code to run.
                //foreach (string command in commands)
                //{
                //    ps.AddScript(command, true);
                //    var a = ps.Invoke();

                //    ps.AddScript(command);
                //    // execute the script and await the result.
                //    var pipelineObjects = ps.Invoke();
                //    // print the resulting pipeline objects to the console.
                //    Console.WriteLine("----- Pipeline Output below this point -----");
                //    foreach (var item in pipelineObjects)
                //    {
                //        Console.WriteLine(item.BaseObject.ToString());
                //    }
                //}



            }
        }

        /// <summary>
        /// Handles data-added events for the information stream.
        /// </summary>
        /// <remarks>
        /// Note: Write-Host and Write-Information messages will end up in the information stream.
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Information_DataAdded(object sender, DataAddedEventArgs e)
        {
            var streamObjectsReceived = sender as PSDataCollection<InformationRecord>;
            var currentStreamRecord = streamObjectsReceived[e.Index];

            Console.WriteLine($"InfoStreamEvent: {currentStreamRecord.MessageData}");
        }

        /// <summary>
        /// Handles data-added events for the warning stream.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Warning_DataAdded(object sender, DataAddedEventArgs e)
        {
            var streamObjectsReceived = sender as PSDataCollection<WarningRecord>;
            var currentStreamRecord = streamObjectsReceived[e.Index];

            Console.WriteLine($"WarningStreamEvent: {currentStreamRecord.Message}");
        }

        /// <summary>
        /// Handles data-added events for the error stream.
        /// </summary>
        /// <remarks>
        /// Note: Uncaught terminating errors will stop the pipeline completely.
        /// Non-terminating errors will be written to this stream and execution will continue.
        /// </remarks>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Error_DataAdded(object sender, DataAddedEventArgs e)
        {
            var streamObjectsReceived = sender as PSDataCollection<ErrorRecord>;
            var currentStreamRecord = streamObjectsReceived[e.Index];

            Console.WriteLine($"ErrorStreamEvent: {currentStreamRecord.Exception}");
        }
    }
}
