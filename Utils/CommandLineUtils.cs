using MalwareAdmin.Data;
using MalwareAdmin.Models.WSL;
using System;
using System.Linq;
using System.Management.Automation;
using System.Text;
using System.Threading.Tasks;

namespace MalwareAdmin.Utils
{
    public class CommandLineUtils
    {
        public static bool ShowConsole = false;
        //public static Task<string> ExecuteWindowsCommandAsync(params string[] commands)
        //{
        //    return ExecuteWindowsCommandAsync(commands);
        //}

        public static Task<string> ExecuteWSLCommand(params string[] commands)
        {
            if (!commands.Any())
            {
                return Task.FromResult(string.Empty);
            }
            WSLInfo wSLInfo = AppData.WorkingWSL;
            return ExecuteCommandAsync("powershell.exe", commands);
        }
        public static Task<string> ExecuteWindowsCommandAsync(string command)
        {
            return ExecuteCommandAsync("powershell.exe", command);
        }
        public static Task<string> ExecuteWSLCommand(string command)
        {
            WSLInfo wSLInfo = AppData.WorkingWSL;
            return ExecuteCommandAsync("powershell.exe", command);
        }

        public static async Task<string> ExecuteCommandAsync(string file, params string[] commands)
        {


            return await Task.Run(() =>
            {
                if (commands.Length > 1)
                {
                    HostedRunspace runspace = new HostedRunspace();
                    runspace.InitializeRunspaces(1, 10, null);
                    return runspace.RunScript(commands);
                }

                StringBuilder sb = new StringBuilder();
                using (var ps = PowerShell.Create())
                {
                    foreach (string command in commands)
                    {
                        ps.AddScript(command);
                        var results = ps.Invoke();
                        foreach (var result in results)
                        {
                            string data = result.ToString();
                            if (string.IsNullOrEmpty(data)) continue;
                            data = data.Replace("\0", string.Empty);
                            if (string.IsNullOrEmpty(data)) continue;
                            if (data.StartsWith("Microsoft Windows") || data.Contains("Microsoft Corporation") || data.Contains("PowerShell") || data.Contains(Environment.CurrentDirectory)) { continue; }
                            sb.AppendLine(data);
                        }
                    }
                    string output = sb.ToString();
                    return output;
                }

                //StringBuilder sb = new StringBuilder();
                //using (var proc = new Process
                //{
                //    StartInfo = new ProcessStartInfo
                //    {
                //        FileName = file,
                //        WindowStyle = ShowConsole ? ProcessWindowStyle.Normal : System.Diagnostics.ProcessWindowStyle.Hidden,
                //        CreateNoWindow = !ShowConsole,
                //        UseShellExecute = false,
                //        RedirectStandardOutput = true,
                //        RedirectStandardInput = true,
                //        RedirectStandardError = true,
                //        ErrorDialog = true
                //    }
                //})
                //{

                //    proc.Start();
                //    //proc.StandardInput.AutoFlush = true;
                //    proc.BeginOutputReadLine();
                //    proc.OutputDataReceived += (s, e) =>
                //    {
                //        if (string.IsNullOrEmpty(e.Data)) return;
                //        string data = e.Data.Replace("\0", string.Empty);
                //        if (string.IsNullOrEmpty(data)) return;
                //        if (data.StartsWith("Microsoft Windows") || data.Contains("Microsoft Corporation") || data.Contains("PowerShell") || data.Contains(Environment.CurrentDirectory)) { return; }
                //        sb.AppendLine(data);
                //    };
                //    foreach (string command in commands)
                //    {
                //        proc.StandardInput.Write(command);
                //        proc.StandardInput.Flush();
                //    }
                //    proc.StandardInput.Close();
                //    proc.WaitForExit(); // wait up to 5 seconds for command to execute
                //    proc.CancelOutputRead();
                //    string output = sb.ToString();
                //    if (string.IsNullOrEmpty(output))
                //    {
                //        output = proc.StandardError.ReadToEnd();
                //    }
                //    return output?.Trim() ?? string.Empty;
                //}
            });
        }
        //public static Task<string> ExecuteCommandAsync(string file, string command, bool finish = true)
        //{
        //    return Task.Run(() =>
        //    {
        //        StringBuilder sb = new StringBuilder();
        //        using (Process p = new Process())
        //        {
        //            ProcessStartInfo startInfo = new ProcessStartInfo(file, command)
        //            {
        //                // Redirect the output stream of the child process.
        //                //UseShellExecute = false,
        //                RedirectStandardOutput = true,
        //                WindowStyle = ShowConsole ? ProcessWindowStyle.Normal : System.Diagnostics.ProcessWindowStyle.Hidden,
        //                RedirectStandardInput = true,
        //                CreateNoWindow = !ShowConsole
        //            };
        //            p.StartInfo = startInfo;
        //            p.Start();
        //            p.BeginOutputReadLine();
        //            p.OutputDataReceived += (s, e) =>
        //            {
        //                if (string.IsNullOrEmpty(e.Data)) return;
        //                string data = e.Data.Replace("\0", string.Empty);
        //                if (string.IsNullOrEmpty(data)) return;
        //                sb.AppendLine(data);
        //            };
        //            p.WaitForExit();
        //        }
        //        string output = sb.ToString();
        //        return output?.Trim() ?? string.Empty;

        //    });
        //}
    }
}
