using Kit.Enums;
using MalwareAdmin.Data;
using MalwareAdmin.Enums;
using MalwareAdmin.Models.WSL;
using MalwareAdmin.Utils;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace MalwareAdmin.WSL
{
    public class WslUtils
    {

        public static async IAsyncEnumerable<WSLInfo> GetWSLInstances()
        {
            await Task.Yield();
            string output = await CommandLineUtils.ExecuteWindowsCommandAsync("wsl -l -v");
            if (string.IsNullOrEmpty(output))
            {
                yield break;
            }

            IEnumerable<string> lines = output.Split(Environment.NewLine).Skip(1);
            foreach (string l in lines)
            {
                string line = l?.Trim();
                if (!string.IsNullOrEmpty(line))
                {
                    if (line.StartsWith('*'))
                    {
                        line = line.Substring(1, line.Length - 1).Trim();
                    }
                    string[] args = line.Split(' ', StringSplitOptions.RemoveEmptyEntries).ToArray();
                    if (args.Length == 3)
                    {
                        yield return new WSLInfo()
                        {
                            Name = args[0],
                            State = Enum.Parse<WSLInstanceState>(args[1]),
                            Version = Enum.Parse<WSLVersion>(args[2])
                        };
                    }
                }
            }
        }



        private static async Task<bool> _CheckPhyton()
        {
            string version = await CommandLineUtils.ExecuteWSLCommand("python3 -V");
            return Regex.IsMatch(version, @"Python 3\.\d+\.\d+");
        }
        public static async Task<bool> CheckPhyton()
        {
            if (!await _CheckPhyton())
            {
                CustomMessageBoxResult response = await Kit.Tools.Instance.Dialogs.CustomMessageBox.ShowOKCancel(
                      $"Necesita instalar phyton 3 en la instancia de WSL \"{AppData.WorkingWSL.Name}\" para ejeuctar Viper.\nPuedo instalarlo por usted.\n ¿Instalarlo ahora?",
                      "Phyton 3 no instalado", "Sí", "No");
                //if (response == CustomMessageBoxResult.OK)
                //{
                //    await InstallPhyton();
                //    if (!await CheckPhyton())
                //    {
                //        await Kit.Tools.Instance.Dialogs.CustomMessageBox.ShowOK(
                //             $"No fue posible instalar python3 \"{AppData.WorkingWSL.Name}\"\n Pruebe a instalarlo usted mismo.",
                //             "Phyton 3 no instalado", "Ok");
                //        return false;
                //    }
                //}
            }
            return true;
        }
        private static async Task InstallPhyton()
        {
            CommandLineUtils.ShowConsole = true;
            await CommandLineUtils.ExecuteWSLCommand("sudo su jon2g", "7322", "sudo apt update");
            CommandLineUtils.ShowConsole = false;
        }
    }
}
