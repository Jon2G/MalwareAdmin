using AsyncAwaitBestPractices;
using MalwareAdmin.Models.Files;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace MalwareAdmin.Views
{
    /// <summary>
    /// Interaction logic for TreeExplorerView.xaml
    /// </summary>
    public partial class TreeExplorerView
    {
        public static readonly DependencyProperty ExplorerItemsProperty = DependencyProperty.Register(
            name: nameof(ExplorerItems), propertyType: typeof(ObservableCollection<ObjectExplorer>),
            ownerType: typeof(TreeExplorerView),
            new PropertyMetadata(null, (e, o) =>
            {
                if (e is TreeExplorerView tree) tree.ExplorerItems = (ObservableCollection<ObjectExplorer>)o.NewValue;
            }));

        public ObservableCollection<ObjectExplorer> ExplorerItems
        {
            get => (ObservableCollection<ObjectExplorer>)GetValue(ExplorerItemsProperty);
            set
            {
                SetValue(ExplorerItemsProperty, value);
                Raise(() => ExplorerItems);
            }
        }
        public TreeExplorerView()
        {
            InitializeComponent();
        }

        private void TreeView_OnSelectedItemChanged(object sender, RoutedPropertyChangedEventArgs<object> e)
        {
            if (sender is TreeView tree)
            {
                if (e.OldValue is FileObject Oldfile)
                {
                    Oldfile.IsSelected = false;
                }

                if (e.NewValue is FileObject file)
                {
                    file.IsSelected = true;
                }
                else if (e.NewValue is FolderObject folder)
                {
                    if (!folder.Items.Any())
                        folder.GetChilds(true).SafeFireAndForget();

                }
            }
        }

        private void UIElement_OnKeyUp(object sender, KeyEventArgs e)
        {
            TreeView tree = sender as TreeView;
            if (tree is null) return;
            ObjectExplorer file = tree.SelectedItem as ObjectExplorer;
            if (file is null) return;
            switch (e.Key)
            {
                case Key.Delete:
                    file.Delete();
                    break;
            }
        }
    }
}
