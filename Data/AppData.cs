using AsyncAwaitBestPractices;
using Kit.Enums;
using LiteDB;
using MalwareAdmin.Models.WSL;
using MalwareAdmin.Utils;
using MalwareAdmin.WSL;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Tools = Kit.WPF.Tools;

namespace MalwareAdmin.Data
{
    public static class AppData
    {
        public static DirectoryInfo SamplesFolder
        {
            get
            {
                if (Tools.Instance is not null)
                    return new DirectoryInfo($"{Tools.Instance.LibraryPath}/Samples");
                return new DirectoryInfo("F:\\source\\repos\\MalwareAdmin\\bin\\Debug\\net6.0-windows\\Samples");
            }
        }
        public static DirectoryInfo ViperFolder => new DirectoryInfo($"{Tools.Instance.LibraryPath}/Viper");

        public static string WSLViperFolder
        {
            get
            {
                var vfolder = ViperFolder;
                string rootLetter = vfolder.Root.FullName;
                string path = vfolder.FullName
                    .Replace(rootLetter, "")
                    .Replace("\\", "/");
                rootLetter = rootLetter.ToLower().Replace(":\\", "");
                string folder = $"/mnt/{rootLetter}/{path}";
                return folder;
            }
        }

        public static string LiteDBPath => $"{Tools.Instance.LibraryPath}/LiteDb/MalwareAdmin";

        public static LiteDatabase Database => _Database.Value;
        private static readonly Lazy<LiteDatabase> _Database = new Lazy<LiteDatabase>(() =>
        {
            FileInfo file = new FileInfo(LiteDBPath);
            if (!file.Directory.Exists)
            {
                file.Directory.Create();
            }
            return new LiteDatabase(new ConnectionString()
            {
                Filename = file.FullName,
                Connection = ConnectionType.Shared,
                ReadOnly = false
            });
        });
        public static WSLInfo WorkingWSL { get; private set; }
        public static async Task Init()
        {
            //string dir = await CommandLineUtils.ExecuteWindowsCommandAsync("C:", "cd C:\\Users\\jonyj\\Desktop\\Maestria", "dir");

            List<WSLInfo> instances = await WslUtils.GetWSLInstances().ToListAsync();
            if (instances.Count <= 0)
            {
                Tools.Instance.Dialogs.CustomMessageBox.Show("No se detecto ninguna instancia de WSL instalada!.\nWSL es requerido para diversos componentes asegurese de tener una instancia de ubuntu funcional en su maquina windows que responda al comando:\"wsl\"", "WSL es requerido.", CustomMessageBoxButton.OK, CustomMessageBoxImage.Error)
                    .SafeFireAndForget();
                return;
            }
            WorkingWSL = instances.First();
            if (instances.Count > 1)
            {
                Tools.Instance.Dialogs.CustomMessageBox.Show($"Se detectarón multiples instancias de WSL instaladas!.\nSe tomará la instancia \"{WorkingWSL.Name}\" arbritariamente, puede cambiar esto en la sección de ajustes.", "Multiples instancias de WSL.", CustomMessageBoxButton.OK, CustomMessageBoxImage.Error)
                    .SafeFireAndForget();
            }
            await WslUtils.CheckPhyton();
            ViperUtils.InitViper();
            await CommandLineUtils.ExecuteWSLCommand($"cd {AppData.WSLViperFolder}", ".\\quicktest.sh ");
        }
    }
}
