@using MalwareAdmin.Utils


<RadzenCard style="overflow: auto;height: 90vh">
    @if (File is null)
    {
        <div style="margin:auto">
            <h3>Seleccione un archivo para ver su información</h3>
            <div style="text-align: center;">
                <RadzenIcon Icon="inventory" style="font-size: 70px" />
            </div>
        </div>
        return;
    }
    <MudGrid>
        <MudItem xs="9">
            @if (File.AnalysisData is not null)
            {
                <MudSimpleTable Elevation="0">
                    <tbody>
                        <tr>
                            <td>MD5</td>
                            <td>@File.AnalysisData.MD5</td>
                        </tr>
                        <tr>
                            <td>SHA1</td>
                            <td>@File.AnalysisData.VTotalReport.SHA1</td>
                        </tr>
                        <tr>
                            <td>SHA256</td>
                            <td>@File.AnalysisData.VTotalReport.SHA256</td>
                        </tr>
                        @if (!string.IsNullOrEmpty(File.AnalysisData.VTotalReport.TLSH))
                        {
                            <tr>
                                <td>TLSH</td>
                                <td>@File.AnalysisData.VTotalReport.TLSH</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(File.AnalysisData.VTotalReport.SSDeep))
                        {
                            <tr>
                                <td>SSDeep</td>
                                <td>@File.AnalysisData.VTotalReport.SSDeep</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(File.AnalysisData.VTotalReport.Magic))
                        {
                            <tr>
                                <td>Magic</td>
                                <td>@File.AnalysisData.VTotalReport.Magic</td>
                            </tr>
                        }
                        @if (!string.IsNullOrEmpty(File.AnalysisData.VTotalReport.TypeDescription))
                        {
                            <tr>
                                <td>File type</td>
                                <td>@File.AnalysisData.VTotalReport.TypeDescription</td>
                            </tr>
                        }
                        @if (File.AnalysisData.VTotalReport.Size > 0)
                        {
                            <tr>
                                <td>File size</td>
                                <td>@(FileSizeUtils.ToReadableSize(File.AnalysisData.VTotalReport.Size))</td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            }
            else
            {
                <LoadingCardView Image="imgs/document-scanning.gif" />
            }
        </MudItem>
        <MudItem xs="3">
            @if (File?.AnalysisData?.VTotalReport?.LastAnalysisStats is not null)
            {
                LastAnalysisStats? stats = File?.AnalysisData?.VTotalReport?.LastAnalysisStats;
                if (stats is not null)
                {
                    StatsValue = new double[] { stats.Harmless, stats.Malicious, stats.Undetected, stats.Timeout };
                    StatsLabels = new[] { "Harmless", "Malicious", "Undetected", "Timeout" };
                }
            }
            else
            {
                StatsValue = null;
                StatsLabels = null;
            }
            @if (IsChartReady)
            {
                <MudChart Style="margin: 10px" ChartType="ChartType.Donut" Width="200px" Height="200px" InputData="@StatsValue" InputLabels="@StatsLabels">
                    <CustomGraphics>
                        <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Veredict</text>
                        <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="3">@StatsVeredict</text>
                    </CustomGraphics>
                </MudChart>
            }
        </MudItem>
    </MudGrid>
    <MudGrid>
        @if (File.AnalysisData?.VTotalReport?.Names?.Any() ?? false)
        {
            <MudItem xs="6">
                <MudExpansionPanels DisableBorders="true" Elevation="0">
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.AutoAwesomeMotion" class="mr-3"></MudIcon>
                                <MudText>Nombres conocidos</MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudList Clickable="true">
                                @foreach (string name in File.AnalysisData.VTotalReport.Names)
                                {
                                    <MudListItem Text="@name" />
                                }
                            </MudList>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
        }
        @if (File.AnalysisData?.VTotalReport?.Trid?.Any() ?? false)
        {
            <MudItem xs="6">
                <MudExpansionPanels DisableBorders="true" Elevation="0">
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.FileOpen" class="mr-3"></MudIcon>
                                <MudText>Tipos de archivos</MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudList Clickable="true">
                                @foreach (Trid trid in File.AnalysisData.VTotalReport.Trid)
                                {
                                    <MudListItem>
                                        <MudGrid>
                                            <MudItem xs="4"><h6>@trid.Probability%</h6></MudItem>
                                            <MudItem xs="8">@trid.FileType</MudItem>
                                        </MudGrid>
                                    </MudListItem>
                                }
                            </MudList>
                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
        }
        @if (File.AnalysisData?.VTotalReport?.LastAnalysisResults is not null)
        {
            <MudItem xs="12">
                <MudExpansionPanels DisableBorders="true" Elevation="0">
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex">
                                <MudIcon Icon="@Icons.Material.Filled.AddModerator" class="mr-3"></MudIcon>
                                <MudText>Reporte por proveedor</MudText>
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudTable Items="@AnalysisStats" Dense="false" Hover="true" Bordered="false" Striped="true" Filter="new Func<LastAnalysisStat,bool>(FilterFunc1)">
                                <ToolBarContent>
                                    <MudText Typo="Typo.h6">Reporte por proveedor</MudText>
                                    <MudSpacer />
                                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                                </ToolBarContent>
                                <HeaderContent>
                                    <MudTh>Proveedor</MudTh>
                                    <MudTh>Malicioso</MudTh>
                                    <MudTh>Sopechoso</MudTh>
                                    <MudTh>Tiempo agotado</MudTh>
                                    <MudTh>Inofensivo</MudTh>
                                    <MudTh>No detectado</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Nr">@context.Name</MudTd>
                                    <MudTd DataLabel="Sign">@context.Stats.Malicious</MudTd>
                                    <MudTd DataLabel="Position">@context.Stats.Suspicious</MudTd>
                                    <MudTd DataLabel="Molar mass">@context.Stats.Timeout</MudTd>
                                    <MudTd DataLabel="Name">@context.Stats.Harmless</MudTd>
                                    <MudTd DataLabel="Molar mass">@context.Stats.Undetected</MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager />
                                </PagerContent>
                            </MudTable>

                        </ChildContent>
                    </MudExpansionPanel>
                </MudExpansionPanels>
            </MudItem>
        }
        @if (File.AnalysisData?.CuckoosFileData is {} data)
        {
            @foreach (JsonReport report in data.Reports.OrderByDescending(x=>x.Info.Id))
            {
                <CuckooJsonReportView Report="@report"/>
            }
        }
    </MudGrid>
</RadzenCard>
@code
{
    private string searchString1 = "";
    private bool FilterFunc1(LastAnalysisStat element) => FilterFunc(element, searchString1);

    private bool FilterFunc(LastAnalysisStat element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString))
            return true;
        return false;
    }
}
