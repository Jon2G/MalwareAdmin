using AsyncAwaitBestPractices;
using Kit;
using Kit.Razor.Interfaces;
using MalwareAdmin.Models.Files;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Forms;
using Radzen;

namespace MalwareAdmin.Components
{
    public partial class FileUploadView : IStateHasChanged
    {
        [Parameter] public EventHandler OnClosed { get; set; }
        [Parameter]
        public EventCallback<FolderObject> FolderChanged { get; set; }

        private FolderObject _Folder;
        [Parameter]
        public FolderObject Folder
        {
            get => _Folder;
            set
            {
                if (value != _Folder)
                {
                    _Folder = value;
                    OnFolderChanged(value);
                }
            }
        }
        void OnFolderChanged(FolderObject value)
        {
            Folder = value;
            FolderChanged.InvokeAsync(value).SafeFireAndForget();
        }

        [Inject] public DialogService DialogService { get; set; }

        private bool Clearing = false;
        private static string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
        private string DragClass = DefaultDragClass;
        private List<string> fileNames = new List<string>();
        private List<IBrowserFile> Files = new List<IBrowserFile>();
        public FileUploadView()
        {

        }
        private void OnInputFileChanged(InputFileChangeEventArgs e)
        {
            ClearDragClass();
            if (e.FileCount > 10)
            {
                FilesLimitAlert();
                Clear();
                return;
            }
            var files = e.GetMultipleFiles();
            foreach (var file in files)
            {
                Files.Add(file);
                fileNames.Add(file.Name);
            }
        }

        private void Clear()
        {
            Clearing = true;
            fileNames.Clear();
            Files.Clear();
            ClearDragClass();
            Clearing = false;
            OnClosed?.Invoke(this, EventArgs.Empty);
        }

        private void Upload()
        {
            if (Folder is null) return;
            Task.WhenAll(Files.Select(x => UploadFile(x)).ToArray())
                .ContinueWith(t =>
                {
                    Clear();
                    Folder.GetChilds().SafeFireAndForget();
                }).SafeFireAndForget();
        }
        private async Task UploadFile(IBrowserFile file)
        {
            try
            {
                await Task.Yield();
                if (Folder is null) return;
                var filePath = Path.Combine(Folder.Path, file.Name);
                if (!Folder.Folder.Exists)
                {
                    Folder.Folder.Create();
                }

                using (Stream stream = file.OpenReadStream(maxAllowedSize: 100000000))
                {
                    using (Stream destinyStream = System.IO.File.Create(filePath))
                    {
                        await stream.CopyToAsync(destinyStream);
                    }
                }
                FileObject fileObject = new FileObject(filePath, Folder);
                Task.Run(() => fileObject.GetAnalysisData(this)).SafeFireAndForget();
            }
            catch (Exception ex)
            {
                Log.Logger.Error(ex, "UploadFile");
                return;
            }
        }

        private void SetDragClass()
        {
            DragClass = $"{DefaultDragClass} mud-border-primary";
        }

        private void ClearDragClass()
        {
            DragClass = DefaultDragClass;
        }
        public void Refresh()
        {
            InvokeAsync(StateHasChanged).SafeFireAndForget();
        }
    }
}