@using Cuckoo.Net.Enums
@using MalwareAdmin.Controllers
@using Blazorise.Extensions
<MudList Clickable="true" style="overflow:auto;max-height:90vh" Dense=true> 
    @foreach (CuckooTask task in CuckooUtils.Tasks)
    {
        <MudListItem>
            <div>
                <b>Tarea: #@task.Id</b>
                <br/>
                <b>Muestra: #@task.SampleId</b>
                <p>Archivo:@task.Target</p>
                <p>Prioridad:@task.Priority</p>
                <p>Categoria:@task.Category</p>
                <p>MD5:@task.Sample.MD5</p>
                @switch (task.Status)
                {
                    case Status.failed_analysis:
                     <MudButton Color="Color.Error" Variant="Variant.Filled" DisableElevation="true" Disabled="false">ERROR</MudButton>
                    break;
                    case Status.Reported:
                        <MudButton Color="Color.Success" Variant="Variant.Filled" DisableElevation="true" @onclick="@(()=>DownloadReport(task))">COMPLETADO</MudButton>
                        break;
                    case Status.Completed:
                        <MudButton Color="Color.Warning" Variant="Variant.Filled" DisableElevation="true" @onclick="@(() => DownloadReport(task))">
                            <div>
                                <P>COMPLETADO - REPORTANDO</P>
                                <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
                            </div>
                        </MudButton>
                    break;
                    case Status.Pending:
                        <MudButton Color="Color.Warning" Variant="Variant.Filled" DisableElevation="true" @onclick="@(()=>DownloadReport(task))">PENDIENTE</MudButton>
                        break;
                    case Status.Running:
                        <MudButton Color="Color.Info" Variant="Variant.Filled" DisableElevation="true" @onclick="@(() => DownloadReport(task))">
                            <MudProgressLinear Color="Color.Secondary" Indeterminate="true"/>
                        </MudButton>
                        break;
                }
            </div>
        </MudListItem>
    }
</MudList>

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await CuckooUtils.GetTasks();
            InvokeAsync(StateHasChanged).SafeFireAndForget();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    void DownloadReport(CuckooTask task){
        try{
        CuckooUtils.GetReport(task)
        .ContinueWith(t=>
        {
            JsonReport? jsonReport= t.Result as JsonReport;
            var data = FileAnalysisData.Get(jsonReport.Target.File.Md5);
            if(data is null) return;
            data.CuckoosFileData ??= new CuckoosFileData();
            if (!data.CuckoosFileData.Reports.Exists(x => x.Info.Id != jsonReport.Info.Id))
            {
                data.CuckoosFileData.Reports.Add(jsonReport);
                data.Save();
            }
        })
        .SafeFireAndForget();
        }catch(Exception ex){
            Console.WriteLine(ex);
        }
    }

}
