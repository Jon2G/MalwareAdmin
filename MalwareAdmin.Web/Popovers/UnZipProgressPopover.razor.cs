using AsyncAwaitBestPractices;
using MalwareAdmin.Models.Files;
using MalwareAdmin.Web.Interfaces;
using Microsoft.AspNetCore.Components;
using Radzen;

namespace MalwareAdmin.Web.Popovers
{
    public partial class UnZipProgressPopover : IPopover
    {
        public static bool IsUnzipping { get; set; }
        [Parameter]
        public ZipFileObject File { get; set; }
        [Parameter]
        public Func<IPopover, UnZipProgressPopover, Task> Unzip { get; set; }
        [Inject] public DialogService DialogService { get; set; }
        private float _Progress;
        public float Progress
        {
            get => _Progress;
            set
            {
                _Progress = value;
                Refresh();
            }
        }
        private float _GeneralProgress;
        public float GeneralProgress
        {
            get => _GeneralProgress;
            set
            {
                _GeneralProgress = value;
                Refresh();
            }
        }
        private string _CurrentFile;

        public string CurrentFile
        {
            get => _CurrentFile;
            set
            {
                _CurrentFile = value;
                Refresh();
            }
        }
        public long FileSize;    //the size of the zip file
        public long ExtractedSizeTotal;    //the bytes total extracted
        public UnZipProgressPopover() : base()
        {

        }

        public UnZipProgressPopover(ZipFileObject file, Func<IPopover, UnZipProgressPopover, Task> unzip) : this()
        {
            this.File = file;
            this.Unzip = unzip;
        }

        public Task Close()
        {
            return Task.Run(() => DialogService.Close(this));
        }

        public void Refresh()
        {
            InvokeAsync(StateHasChanged);
        }

        protected override void OnAfterRender(bool firstRender)
        {
            base.OnAfterRender(firstRender);
            if (firstRender)
            {
                Task.Delay(200).ContinueWith((t) =>
                {
                    Task.Run(() => Unzip?.Invoke(this, this)).ContinueWith(t => this.Close().SafeFireAndForget())
                        .SafeFireAndForget();
                }).SafeFireAndForget();
            }
        }
    }
}
