using AsyncAwaitBestPractices;
using Kit.Razor.Interfaces;
using Microsoft.AspNetCore.Components;
using MudBlazor;

namespace MalwareAdmin.Popovers
{
    public partial class MudPopoverBase : IStateHasChanged
    {
        [Parameter]
        public RenderFragment ChildContent { get; set; }

        private MudPopover Popover;
        public bool IsOpen
        {
            get => Popover?.Open ?? false;
            set
            {
                Popover.Open = value;
                if (!value)
                {
                    OnClose();
                }
                Refresh();
            }
        }
        public bool IsFixed
        {
            get => Popover?.Fixed ?? false;
            set
            {
                Popover.Fixed = value;
                StateHasChanged();
            }
        }

        private readonly AutoResetEvent ShowDialogCallback;

        public MudPopoverBase() : base()
        {
            this.ShowDialogCallback = new AutoResetEvent(false);
        }

        protected override void OnAfterRender(bool firstRender)
        {
            base.OnAfterRender(firstRender);
        }
        protected override void OnParametersSet()
        {
            // coalesce
            ChildContent ??= CreateDefaultChildContent();
        }

        private static RenderFragment CreateDefaultChildContent()
        {
            return builder =>
            {
                builder.OpenElement(0, "h4");
                builder.AddContent(1, "Derived Component default child content value");
                builder.CloseElement();
            };
        }
        public MudPopoverBase Close()
        {
            IsOpen = false;
            Refresh();
            return this;
        }
        public MudPopoverBase Show()
        {
            IsOpen = true;
            return this;
        }
        public virtual async Task<MudPopoverBase> ShowDialog()
        {
            Show();
            await Task.Run(() => this.ShowDialogCallback.WaitOne());
            return this;
        }

        protected virtual void OnClose()
        {
            ShowDialogCallback.Set();
        }

        public void Refresh()
        {
            InvokeAsync(StateHasChanged).SafeFireAndForget();
        }
    }
}