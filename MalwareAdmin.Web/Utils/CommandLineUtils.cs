using Kit;
using MalwareAdmin.ViewModels;
using System.Diagnostics;
using System.Text;

namespace MalwareAdmin.Utils
{
    public class CommandLineUtils
    {
        public static bool ShowConsole = false;
        public static Task<string> ExecuteWindowsCommandAsync(string command)
        {
            return ExecuteCommandAsync("powershell.exe", command);
        }
        public static Task<string> ExecuteWSLCommandAsync(params string[] commands)
        {
            if (!commands.Any())
            {
                return Task.FromResult(string.Empty);
            }
            return ExecuteCommandAsync("wsl.exe", commands);
        }
        public static Task<string> ExecuteWSLCommandAsync(string command)
        {
            return ExecuteCommandAsync("wsl.exe", command);
        }
        private static async Task<string> ExecuteCommandAsync(string file, params string[] commands)
        {
            return await Task.Run(() =>
            {
                var cmdLog = Tools.Container.Get<CommandLineViewModel>();
                StringBuilder sb = new StringBuilder();
                using (var proc = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = file,
                        WindowStyle = ShowConsole
                                   ? ProcessWindowStyle.Normal
                                   : System.Diagnostics.ProcessWindowStyle.Hidden,
                        CreateNoWindow = !ShowConsole,
                        UseShellExecute = false,
                        RedirectStandardOutput = true,
                        RedirectStandardInput = true,
                        RedirectStandardError = true,
                        ErrorDialog = true
                    }
                })
                {

                    proc.Start();
                    //proc.StandardInput.AutoFlush = true;
                    proc.BeginOutputReadLine();
                    void DataReceived(object s, DataReceivedEventArgs e, bool isError)
                    {
                        if (string.IsNullOrEmpty(e.Data)) return;
                        string data = e.Data.Replace("\0", string.Empty);
                        if (string.IsNullOrEmpty(data)) return;
                        if (data.StartsWith("Microsoft Windows") || data.Contains("Microsoft Corporation") ||
                            data.Contains("PowerShell") || data.Contains(Environment.CurrentDirectory))
                        {
                            return;
                        }
                        cmdLog?.Log(data, isError);
                        sb.AppendLine(data);
                    }
                    proc.OutputDataReceived += (s, e) => DataReceived(s, e, false);
                    proc.ErrorDataReceived += (s, e) => DataReceived(s, e, true);
                    foreach (string command in commands)
                    {
                        proc.StandardInput.Write(command + "\n\r");
                        proc.StandardInput.Flush();
                    }
                    proc.StandardInput.Close();
                    proc.WaitForExit(); // wait up to 5 seconds for command to execute
                    proc.CancelOutputRead();
                    string output = sb.ToString();
                    if (string.IsNullOrEmpty(output))
                    {
                        output = proc.StandardError.ReadToEnd();
                    }
                    return output?.Trim() ?? string.Empty;
                }
            });
        }
        public static string GetLastLine(string text)
        {
            if (string.IsNullOrEmpty(text))
            {
                return string.Empty;
            }
            string lastLine = text.Split("\r\n", StringSplitOptions.RemoveEmptyEntries)
                .LastDefault(x => !string.IsNullOrEmpty(x));
            if (string.IsNullOrEmpty(lastLine))
            {
                return text;
            }
            return lastLine;
        }
    }
}
