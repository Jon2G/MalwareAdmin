using AsyncAwaitBestPractices;
using Kit;
using MalwareAdmin.Models.Files;
using System.Text.RegularExpressions;

namespace MalwareAdmin.Utils
{
    public static class ViperUtils
    {
        public static async Task CheckVyper()
        {
            string command = "viper --version";
            string version = await CommandLineUtils.ExecuteAsync(command);
            if (!Regex.IsMatch(version, @"\d\.\d-*"))
            {
                Tools.Instance.Dialogs.CustomMessageBox
                    .Show(
                        $"No se encontro viper en su instancia de WSL.\n El comando '{command}' resultó en '{version}' el cual no es un valor esperado.",
                        "Revise su instalación de viper").SafeFireAndForget();
            }
            _ = await CommandLineUtils.ExecuteAsync("viper", "about", "exit");

        }

        public static async Task<bool> Find(FileObject fileObject)
        {
            await Task.Yield();
            if (string.IsNullOrEmpty(fileObject.MD5))
            {
                return false;
            }
            string data = await ExecuteViperCommandsAsync($"open {fileObject.MD5}", "close");
            if (string.IsNullOrEmpty(data) || !data.Contains("Session opened"))
            {
                return false;
            }
            return true;
        }

        internal static async Task AddToViper(FileObject file)
        {
            await Task.Yield();
            string data = await ExecuteViperCommandsAsync($"open -f {file.PathForCommandLine}", "store", "close");
        }

        private static Task<string> ExecuteViperCommandsAsync(params string[] commands) =>
            CommandLineUtils.ExecuteAsync(commands.Prepend("viper").Append("exit").ToArray());
    }
}
