using AsyncAwaitBestPractices;
using Kit;
using Kit.Enums;
using Kit.Extensions;
using Kit.Razor.Interfaces;
using LiteDB;
using MalwareAdmin.Data;
using MalwareAdmin.Utils;
using MudBlazor;
using VirusTotalNet.Exceptions;

namespace MalwareAdmin.Models.Files
{
    public class FileObject : ObjectExplorer
    {
        public string MD5 { get; set; }
        public bool IsOnViper { get; set; }
        public string Extension { get; set; }
        private bool _IsSelected;
        public bool IsSelected
        {
            get => _IsSelected;
            set => RaiseIfChanged(ref _IsSelected, value);
        }

        private bool _IsBusy;

        public bool IsBusy
        {
            get => _IsBusy;
            set
            {
                _IsBusy = value;
                StateHasChanged?.Refresh();
            }
        }

        public Command<FileObject> OnClickCommand { get; set; }
        public FileInfo File => new FileInfo(Path);
        private FileAnalysisData _AnalysisData;
        public FileAnalysisData AnalysisData
        {
            get => _AnalysisData;
            set
            {
                _AnalysisData = value;
                Raise(() => AnalysisData);
            }
        }
        public string PathForCommandLine
        {
            get
            {
                if (AppData.IsWindows) //go through wsl2
                {
                    var fileInfo = File;
                    var directory = fileInfo.Directory;
                    string rootLetter = directory.Root.FullName;
                    string path = fileInfo.FullName
                        .Replace(rootLetter, "")
                        .Replace("\\", "/");
                    rootLetter = rootLetter.Replace(":\\", "").ToLower();
                    string pathToFile = $"/mnt/{rootLetter}/{path}";
                    return pathToFile;
                }

                return File.FullName;
            }
        }
        private string _Icon;
        public string Icon
        {
            get => _Icon;
            set => RaiseIfChanged(ref _Icon, value);
        }
        public FileObject(string Path, FolderObject parent) : this(new FileInfo(Path), parent)
        {

        }
        public FileObject(FileInfo file, FolderObject parent) : base(parent, file)
        {
            OnClickCommand = new Command<FileObject>(OnClick);
            if (!string.IsNullOrEmpty(file.Extension))
            {
                Extension = file.Extension.Substring(1, file.Extension.Length - 1);
                Icon = GetIcon();
            }
        }
        private void OnClick(FileObject file)
        {
            Parent.RemoveSelection();
            file.IsSelected = true;
        }
        public Task UploadToVT()
        {
            return Task.CompletedTask;
            //return App.Current.Dispatcher.InvokeAsync(() =>
            // {
            //     Kit.WPF.ToolsImplementation.Abrir<UploadingFileToVTViewModel>(new UploadingFileToVTViewModel(this),
            //         true);
            // }).Task;
        }
        public async Task DownloadReportFromVT()
        {
            await Task.Yield();
            try
            {
                if (string.IsNullOrEmpty(MD5))
                {
                    GetMD5();
                }
                AnalysisData.VTotalReport =
                    (VirusTotalNet.Results.v3.FileReport)await VirusTotalNet.VirusTotal.V3.GetFileReportAsync(MD5);
                AnalysisData.Save();
            }
            catch (ResourceNotFoundException)
            {
                Tools.Instance.Dialogs.CustomMessageBox.ShowYesNo(
                        "El archivo no existe en la base de datos de VirusTotal.\n¿Desea subirlo y solicitar un escaneo (puede tardar un tiempo)?",
                        "No escaneado por virus total", "Sí", "No")
                    .ContinueWith(t =>
                    {
                        if (t.Result == CustomMessageBoxResult.Yes)
                        {
                            UploadToVT().SafeFireAndForget();
                        }
                    }).SafeFireAndForget();
            }
            catch (Exception ex)
            {
                Log.Logger.Error(ex, "DownloadFromVT:{0}", Path);
            }
        }

        protected override string GetIcon()
        {
            if (string.IsNullOrEmpty(Extension)) return Icons.Custom.FileFormats.FileCode;
            switch (Extension)
            {
                case "js":
                    return Icons.Filled.Javascript;
                case "txt":
                case "json":
                    return Icons.Custom.FileFormats.FileCode;
                case "msi":
                case "exe":
                    return Icons.Filled.Extension;
                case "jar":
                case "zip":
                case "7z":
                    return Icons.Filled.FolderZip;
                case "doc":
                    return Icons.Custom.FileFormats.FileDocument;
                case "xls":
                case "xlsx":
                    return Icons.Custom.FileFormats.FileExcel;
                case "pdf":
                    return Icons.Filled.PictureAsPdf;
                case "ico":
                case "webp":
                case "png":
                case "jpg":
                case "jpeg":
                    return Icons.Custom.FileFormats.FileImage;
                default:
                    return Icons.Custom.FileFormats.FileCode;
            }
        }
        protected override void _Delete()
        {
            if (File.Exists)
            {
                File.Delete();
                Parent.Items.Remove(this);
                Parent.StateHasChanged?.Refresh();
            }
        }

        public async Task GetAnalysisData(IStateHasChanged page)
        {
            if (IsBusy)
            {
                return;
            }
            IsBusy = true;
            await Task.Yield();
            try
            {
                if (string.IsNullOrEmpty(MD5))
                {
                    MD5 = GetMD5();
                }
                AnalysisData = Tools.Container.Get<LiteDatabase>().GetCollection<FileAnalysisData>().FindById(new BsonValue(MD5))
                               ?? FileAnalysisData.GetLocalAnalysisData(this).Save();
                if (string.IsNullOrEmpty(AnalysisData.VTotalReport.SSDeep))
                {
                    GetFuzzyHash().ContinueWith(t =>
                    {
                        this.AnalysisData.VTotalReport.SSDeep = t.Result;
                        page?.Refresh();
                        this.AnalysisData.Save();
                    }).SafeFireAndForget();
                }
                page?.Refresh();
                if (!AnalysisData.IsOnViper)
                    await ViperUtils.Find(this).ContinueWith(t =>
                    {
                        if (!t.Result)
                        {
                            ViperUtils.AddToViper(this).SafeFireAndForget();
                            return;
                        }

                        this.AnalysisData.IsOnViper = true;
                        this.AnalysisData.Save();
                    });
            }
            catch (Exception ex)
            {
                Log.Logger.Error(ex, "GetAnalysisData");
            }
            IsBusy = false;
        }

        public Task<string> GetFuzzyHash()
        {
            return HashUtils.GetFuzzyHash(this.File)
                    .ContinueWith(t =>
                    {
                        if (t.IsCompleted)
                        {
                            if (AnalysisData is null)
                                AnalysisData = new FileAnalysisData();
                            this.AnalysisData.VTotalReport.SSDeep = t.Result;
                        }

                        return t.Result;
                    });
        }
        public string GetSHA1()
        {
            return VirusTotalNet.Helpers.HashHelper.GetSha1(this.File);
        }

        public string GetSHA256()
        {
            return VirusTotalNet.Helpers.HashHelper.GetSha256(this.File);
        }
        public string GetMD5()
        {
            return VirusTotalNet.Helpers.HashHelper.GetMd5(this.File);
        }
    }
}
