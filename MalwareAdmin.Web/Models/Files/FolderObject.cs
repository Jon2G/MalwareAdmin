using AsyncAwaitBestPractices;
using Kit;
using Kit.Extensions;
using MalwareAdmin.Components;
using MalwareAdmin.Popovers;
using Microsoft.Extensions.FileProviders;
using Microsoft.Extensions.Primitives;
using System.Diagnostics;

namespace MalwareAdmin.Models.Files
{
    public class FolderObject : ObjectExplorer
    {
        public HashSet<ObjectExplorer> Items { get; set; } = new HashSet<ObjectExplorer>();
        public DirectoryInfo Folder => new DirectoryInfo(Path);
        private PhysicalFileProvider PhysicalFileProvider { get; set; }
        private IChangeToken FileChangeToken;
        public Command<ObjectExplorer> OnExpandedCommand { get; set; }
        public bool IsExpanded { get; set; }
        public bool IsRoot => Parent is null;
        public FolderObject(string Path, FolderObject parent = null) : this(new DirectoryInfo(Path), parent)
        {

        }

        public FolderObject(DirectoryInfo directory, FolderObject parent = null) : base(parent, directory)
        {
            if (!directory.Exists)
            {
                directory.Create();
            }

            PhysicalFileProvider = new PhysicalFileProvider(Path);
            FileChangeToken = PhysicalFileProvider.Watch("*.*");
            //FileChangeToken = PhysicalFileProvider.Watch("*.*");
            FileChangeToken.RegisterChangeCallback(Notify, default);
            //FolderSystemWatcher = new FileSystemWatcher(Path)
            //{
            //    EnableRaisingEvents = true,
            //    IncludeSubdirectories = false
            //};
            //FolderSystemWatcher.Deleted += FolderSystemWatcher_Deleted;
            //FolderSystemWatcher.Created += FolderSystemWatcher_Created;

        }

        private void Notify(object state)
        {
            GetChilds().ContinueWith(t =>
            {
                FileChangeToken = PhysicalFileProvider.Watch("*.*");
                FileChangeToken.RegisterChangeCallback(Notify, default);
            }).SafeFireAndForget();
        }

        public void ShowInExplorer()
        {
            try
            {
                if (Folder.Exists)
                {
                    Process.Start("explorer.exe", Path);
                }
            }
            catch (Exception ex)
            {
                Log.Logger.Error(ex, "ShowInExplorer");
            }
        }

        internal void NewFolder(string folderName)
        {
            //TODO: validate name?
            if (string.IsNullOrEmpty(folderName))
            {
                return;
            }
            try
            {
                this.Folder.CreateSubdirectory(folderName);
                this.GetChilds().SafeFireAndForget();
            }
            catch (Exception e)
            {
                Log.Logger.Error(e, "NewFolder");
            }
        }

        public void RemoveSelection()
        {
            Parent?.RemoveSelection();
            foreach (FileObject file in Items)
            {
                file.IsSelected = false;
            }
        }
        private void AddFile(FileInfo file)
        {
            FileObject fileObject;
            switch (file.Extension)
            {
                case ".7z":
                    fileObject = new Zip7FileObject(file, this);
                    break;
                case ".zip":
                    fileObject = new ZipFileObject(file, this);
                    break;
                default:
                    fileObject = new FileObject(file, this);
                    break;
            }
            this.Items.Add(fileObject);
        }

        #region FolderSystemWatcher
        private void FolderSystemWatcher_Created(object sender, FileSystemEventArgs e)
        {
            if (!UnZipProgressPopover.IsUnzipping)
            {
                try
                {
                    FileAttributes attr = File.GetAttributes(e.FullPath);
                    //detect whether its a directory or file
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        DirectoryInfo directoryInfo = new DirectoryInfo(e.FullPath);
                        if (directoryInfo.Exists)
                        {
                            GetChilds().SafeFireAndForget();
                        }
                    }
                    else
                    {
                        FileInfo fileInfo = new FileInfo(e.FullPath);
                        if (fileInfo.Exists)
                        {
                            GetChilds().SafeFireAndForget();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Logger.Error(ex, "Getting file info:{0}", e.FullPath);
                }
            }
        }

        private void FolderSystemWatcher_Deleted(object sender, FileSystemEventArgs e)
        {
            if (UnZipProgressPopover.IsUnzipping || !Folder.Exists)
            {
                return;
            }

            FileInfo file = new FileInfo(e.FullPath);
            if (!file.Exists)
            {
                GetChilds().SafeFireAndForget();
            }
        }

        #endregion

        protected override string GetIcon()
        {
            return $"/Imgs/FileIcons/folder.png";
        }
        private bool IsLoading = false;
        public Task GetChilds()
        {
            return Task.Run(() =>
            {
                try
                {
                    if (IsLoading)
                    {
                        return;
                    }

                    IsLoading = true;
                    this.Items.Clear();
                    if (!Folder.Exists)
                    {
                        return;
                    }

                    foreach (DirectoryInfo directory in Folder.GetDirectories())
                    {
                        var folder = new FolderObject(directory, this);
                        this.Items.Add(folder);
                    }
                    foreach (FileInfo file in Folder.EnumerateFiles())
                    {
                        if (file.Length > 0)
                            AddFile(file);
                    }
                }
                catch (Exception ex)
                {
                    Log.Logger.Error(ex, "GetChilds");
                }
                IsLoading = false;
                Tools.Container.Get<ExplorerView>()?.Refresh();
            });
        }

        protected override void _Delete()
        {
            if (Folder.Exists && !IsRoot)
            {
                Folder.Delete(true);
                Parent?.Items.Remove(this);
                Parent?.StateHasChanged?.Refresh();
                this.StateHasChanged?.Refresh();
            }
        }
    }
}
