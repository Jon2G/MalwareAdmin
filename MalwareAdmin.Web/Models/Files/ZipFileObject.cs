using AsyncAwaitBestPractices;
using Kit;
using MalwareAdmin.Web.Interfaces;
using MalwareAdmin.Web.Popovers;
using Microsoft.AspNetCore.Components;

namespace MalwareAdmin.Models.Files
{
    public class ZipFileObject : FileObject
    {
        public ZipFileObject(FileInfo file, FolderObject parent) : base(file, parent)
        {

        }
        public ZipFileObject(string Path, FolderObject parent) : base(Path, parent)
        {
        }

        public async Task UnCompress()
        {
            await Task.Delay(100);
            try
            {
                await _UnCompress();
            }
            catch (Exception e)
            {
                Log.Logger.Error(e, "UnCompressing file:{0}", Path);
            }
        }

        private async Task _UnCompress()
        {
            UnZipProgressPopover? zuPasswordView = await Kit.Tools.Container.Get<Radzen.DialogService>().OpenAsync(this.Name,
                childContent:
                ds =>
                {
                    RenderFragment content(Type t) => builder =>
                   {
                       builder.OpenComponent<UnZipProgressPopover>(0);
                       builder.AddAttribute(1, nameof(UnZipProgressPopover.File), this);
                       builder.AddAttribute(2, nameof(UnZipProgressPopover.Unzip), Unzip);
                       builder.CloseComponent();
                   };
                    return content(typeof(UnZipProgressPopover));
                },
                new Radzen.DialogOptions()
                {
                    Resizable = false,
                    Draggable = false,
                    AutoFocusFirstElement = true,
                    CloseDialogOnEsc = false,
                    ShowClose = false,
                    ShowTitle = true,
                    CloseDialogOnOverlayClick = false
                }) as UnZipProgressPopover;
        }
        protected virtual async Task Unzip(IPopover window, UnZipProgressPopover popover)
        {
            await Task.Yield();
            try
            {
                UnZipProgressPopover.IsUnzipping = true;
                //get the size of the zip file
                popover.FileSize = File.Length;
                using (Ionic.Zip.ZipFile zipFile = Ionic.Zip.ZipFile.Read(Path))
                {
                    //reset the bytes total extracted to 0
                    popover.ExtractedSizeTotal = 0;
                    int fileAmount = zipFile.Count;
                    int fileIndex = 0;
                    zipFile.ExtractProgress += (s, e) =>
                    {
                        if (e.TotalBytesToTransfer > 0)
                        {
                            popover.Progress = (e.BytesTransferred * 1f) / e.TotalBytesToTransfer;
                        }
                    };
                    foreach (Ionic.Zip.ZipEntry ZipEntry in zipFile)
                    {
                        fileIndex++;
                        popover.CurrentFile = "(" + fileIndex.ToString() + "/" + fileAmount + "): " + ZipEntry.FileName;
                        //get the size of a single compressed file
                        long compressedSize = ZipEntry.CompressedSize;
                        ZipEntry.Extract(Parent.Path, Ionic.Zip.ExtractExistingFileAction.OverwriteSilently);
                        //calculate the bytes total extracted
                        popover.ExtractedSizeTotal += compressedSize;
                        popover.GeneralProgress = popover.ExtractedSizeTotal * 1f / popover.FileSize;
                    }

                    popover.Progress = 100;
                }
            }
            catch (Exception ex)
            {
                Log.Logger.Error(ex, "Unzip");
            }
            finally
            {
                UnZipProgressPopover.IsUnzipping = false;
                Parent.GetChilds().SafeFireAndForget();
                window?.Close()?.SafeFireAndForget();
            }
        }
    }
}
