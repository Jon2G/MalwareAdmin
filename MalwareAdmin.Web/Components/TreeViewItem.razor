@using VirusTotalNet
@using Kit
@using MalwareAdmin.Utils
@implements Kit.Razor.Interfaces.IStateHasChanged
<style>
    .hide-expand > .mud-treeview-item-content > .mud-treeview-item-arrow {
        display: none;
    }
</style>
@if (Item is not null)
{
    Item.StateHasChanged = this;
    @if (Item is FolderObject folder)
    {
        <MudTreeViewItem T="ObjectExplorer" @bind-SelectedValue="SelectedFile" Value="@(folder)" Text="@(folder.Name)" @bind-Expanded="@(folder.IsExpanded)" Icon="@(folder.IsExpanded ? Icons.Custom.Uncategorized.FolderOpen : Icons.Custom.Uncategorized.Folder)">
            @foreach (ObjectExplorer item in folder.Items)
            {
                <TreeViewItem Item="item" />
            }
        </MudTreeViewItem>
    }
    else if (Item is FileObject file)
    {
        <MudMenu style="width: 100%" PositionAtCursor="true" ActivationEvent="@MouseEvent.RightClick">
            <ActivatorContent>
                <MudTreeViewItem Class="hide-expand" ExpandedIconColor="Color.Transparent" Expanded="true" T="ObjectExplorer"
                         @bind-SelectedValue="SelectedFile" Value="@(file)" Text="@(file.Name)" Icon="@(file.IsBusy ? Icons.Filled.Sync : file.Icon)" />
            </ActivatorContent>
            <ChildContent>
                @if (file is ZipFileObject zipFile)
                {
                    <MudMenuItem>
                        <MudButton OnClick="()=>UnZip(zipFile)" IconColor="Color.Tertiary" StartIcon="@Icons.Filled.FolderZip">Descomprimir</MudButton>
                    </MudMenuItem>
                }
                <MudMenuItem>
                    <MudButton OnClick="() => DownloadSample(file)" IconColor="Color.Warning" StartIcon="@Icons.Filled.FileDownload">Descargar muestra</MudButton>
                </MudMenuItem>
                <MudMenuItem>
                    <MudButton OnClick="() => ShowInViper(file)" IconColor="Color.Secondary" StartIcon="@Icons.Filled.Web">Mostrar en viper</MudButton>
                </MudMenuItem>
                <MudMenuItem>
                    <MudButton OnClick="() => DownloadFromVT(file)" IconColor="Color.Success" StartIcon="@Icons.Custom.Uncategorized.Bacteria">Actualizar reporte desde virus total.</MudButton>
                </MudMenuItem>
                <MudMenuItem>
                    <MudButton IconColor="Color.Error" StartIcon="@Icons.Filled.Delete" OnClick="@(() => file.Delete())">Eliminar.</MudButton>
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    }
}
@code {
    [Parameter]
    public ObjectExplorer Item { get; set; }
    [Parameter]
    public EventCallback<ObjectExplorer> SelectedFileChanged { get; set; }
    [Inject]
    public IJSRuntime IJSRuntime { get; set; }
    private ObjectExplorer _SelectedFile;

    public ObjectExplorer SelectedFile
    {
        get => _SelectedFile;
        set
        {
            _SelectedFile = value;
            OnSelectedFileChanged(value);
        }
    }
    void OnSelectedFileChanged(ObjectExplorer value)
    {
        SelectedFile = value;
        SelectedFileChanged.InvokeAsync(SelectedFile).SafeFireAndForget();
    }
    void ShowInViper(FileObject file)
    {
        if (string.IsNullOrEmpty(file.AnalysisData?.VTotalReport?.SHA256))
        {
            return;
        }
        Uri uri = new Uri($"http://localhost:8080/project/default/file/{file.AnalysisData.VTotalReport.SHA256}");
        IJSRuntime.InvokeAsync<object>("open", uri.AbsoluteUri, "_blank").AsTask().SafeFireAndForget();
    }

    void DownloadSample(FileObject file)
    {
        file.IsBusy = true;
        Task.Run(async () =>
        {
            var fileStream = file.File.OpenRead();
            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await IJSRuntime.InvokeVoidAsync("downloadFileFromStream", file.Name, streamRef);
        }).ContinueWith(t =>
        {
            file.IsBusy = false;
        }).SafeFireAndForget();
    }
    void DownloadFromVT(FileObject file)
    {
        DownloadFromVTAsync(file).SafeFireAndForget();
    }

    Task DownloadFromVTAsync(FileObject file)
    {
        return Task.Run(async () =>
        {
            if (await VirusTotalUtils.ConfigureVT())
            {
                await file.DownloadReportFromVT();
                Tools.Container.Get<FileMainView>()?.Refresh();
                Refresh();
            }
        });
    }

    public void Refresh()
    {
        InvokeAsync(StateHasChanged).SafeFireAndForget();
    }

    private void UnZip(ZipFileObject file)
    {
        Task.Run(() => file.UnCompress());
    }

}
