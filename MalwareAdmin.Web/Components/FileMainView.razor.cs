using AsyncAwaitBestPractices;
using Kit;
using Kit.Razor.Interfaces;
using MalwareAdmin.Models.Files;
using MalwareAdmin.Web.Models;
using System.Reflection;
using VirusTotalNet.Internal.Objects.v3;

namespace MalwareAdmin.Web.Components
{
    public partial class FileMainView : IStateHasChanged
    {
        private static FileObject? _File;
        public FileObject? File
        {
            get => _File;
            set
            {
                if (_File != value)
                {
                    _File = value;
                    _AnalysisStats = null;
                    Refresh();
                }
            }
        }
        public double[] StatsValue { get; set; }
        public string[] StatsLabels { get; set; }

        public string StatsVeredict
        {
            get
            {
                if (StatsValue.Length <= 0) return string.Empty;
                double max = StatsValue.Max();
                int index = StatsValue.FindIndexOf(max);
                if (index >= 0 && StatsLabels.Length > index)
                    return $"{StatsLabels[index]} {max}/{StatsValue.Sum()}";
                return string.Empty;
            }
        }
        public bool IsChartReady => StatsValue is not null && StatsValue.Length > 0 && StatsLabels is not null && StatsLabels.Length > 0;

        private LastAnalysisStat[] _AnalysisStats;

        public LastAnalysisStat[] AnalysisStats
        {
            get
            {
                if (_AnalysisStats is not null)
                {
                    return _AnalysisStats;
                }
                if (File.AnalysisData?.VTotalReport?.LastAnalysisResults is null)
                {
                    _AnalysisStats = Array.Empty<LastAnalysisStat>();
                }

                List<LastAnalysisStat> stats = new List<LastAnalysisStat>();
                foreach (PropertyInfo property in File.AnalysisData.VTotalReport.LastAnalysisResults.GetType().GetProperties())
                {
                    if (property.PropertyType == typeof(LastAnalysisStats))
                    {
                        var stat = property.GetValue(File.AnalysisData.VTotalReport.LastAnalysisResults) as LastAnalysisStats;
                        if (stat is null) continue;
                        stats.Add(new LastAnalysisStat()
                        {
                            Name = property.Name,
                            Stats = stat
                        });
                    }
                }
                _AnalysisStats = stats.ToArray();
                return _AnalysisStats;
            }
        }

        public FileMainView()
        {
            Tools.Container.Register(this);
        }

        protected override void OnParametersSet()
        {
            base.OnParametersSet();
        }

        public void Refresh()
        {
            InvokeAsync(StateHasChanged).SafeFireAndForget();
        }
    }
}