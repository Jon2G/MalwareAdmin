using AsyncAwaitBestPractices;
using Kit;
using Kit.Razor.Interfaces;
using MalwareAdmin.Data;
using MalwareAdmin.Models.Files;
using MalwareAdmin.Popovers;
using Microsoft.AspNetCore.Components;
using Microsoft.JSInterop;

namespace MalwareAdmin.Components
{
    public partial class ExplorerView : IStateHasChanged
    {
        FolderNamePopOver FolderNamePopOver;
        UploadFilePopOver UploadFilePopOver;
        /// <summary>
        /// Injected javascript interop object.
        /// </summary>
        [Inject] public IJSRuntime JSRuntime { get; set; } = null!;

        /// <summary>
        /// Injected navigation manager.
        /// </summary>
        [Inject]
        protected NavigationManager NavigationManager { get; set; } = null!;

        private FolderObject _SamplesFolder = new FolderObject(AppData.SamplesFolder) { IsExpanded = true };

        public FolderObject SamplesFolder
        {
            get => _SamplesFolder;
            set
            {
                if (value != _SamplesFolder)
                {
                    _SamplesFolder = value;
                }
            }
        }


        private ObjectExplorer _SelectedFile;

        public FolderObject SelectedFolder
        {
            get => ((SelectedFile as FolderObject) ?? SamplesFolder);
            set { }
        }
        public ObjectExplorer SelectedFile
        {
            get => _SelectedFile;
            set
            {
                _SelectedFile = value;
                if (value is FileObject file)
                {
                    //file.GetAnalysisData(this).SafeFireAndForget();
                    Kit.Tools.Container.Get<FileMainView>().File = file;
                }
            }
        }
        //[CascadingParameter] protected EventManager? EventManager { get; set; }
        public ExplorerView()
        {
            Tools.Container.Register(this);
        }

        protected override async Task OnInitializedAsync()
        {
            await Load();
            await base.OnInitializedAsync();
        }

        public void Refresh()
        {
            InvokeAsync(StateHasChanged).SafeFireAndForget();
        }

        public Task Load()
        {
            return SamplesFolder.GetChilds();
        }

        private async Task<HashSet<ObjectExplorer>> LoadServerData(ObjectExplorer parentNode)
        {
            await Task.Yield();
            if (parentNode is FolderObject folderObject)
            {
                await folderObject.GetChilds();
                return folderObject.Items;
            }
            return null;
        }

        private void Delete()
        {
            if (SelectedFile is not null && SelectedFile != SamplesFolder)
                SelectedFile.Delete();
        }
        private void CreateFolder()
        {
            FolderNamePopOver.ShowDialog().ContinueWith(t =>
            {
                SelectedFolder.NewFolder(FolderNamePopOver.FolderName);
                FolderNamePopOver.FolderName = string.Empty;
            });
        }
        private void UploadSamples()
        {
            UploadFilePopOver.Folder = this.SelectedFolder;
            UploadFilePopOver.ShowDialog().SafeFireAndForget();
        }
    }
}