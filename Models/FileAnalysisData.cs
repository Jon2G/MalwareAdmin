using AsyncAwaitBestPractices;
using Kit;
using Kit.Model;
using LiteDB;
using MalwareAdmin.Models.Files;
using MalwareAdmin.Utils;
using VirusTotalNet.Results.v3;

namespace MalwareAdmin.Models
{
    public class FileAnalysisData : ModelBase, IComparable, IEquatable<FileAnalysisData>
    {
        [BsonId(false)]
        public string MD5 => VTotalReport.MD5;
        public bool IsOnViper { get; set; }

        public VirusTotalNet.Results.v3.FileReport VTotalReport { get; set; }
        public CuckoosFileData CuckoosFileData { get; set; }

        private static readonly object CollectionLock = new object();
        public FileAnalysisData()
        {
            VTotalReport = new FileReport();
            CuckoosFileData = null;
        }
        public static FileAnalysisData GetLocalAnalysisData(FileObject file)
        {
            FileReport vtReport = new FileReport()
            {
                MD5 = file.MD5
            };
            FileAnalysisData data = new FileAnalysisData()
            {
                VTotalReport = vtReport
            };
            if (string.IsNullOrEmpty(data.MD5))
            {
                vtReport.MD5 = file.GetMD5();
            }
            if (string.IsNullOrEmpty(vtReport.SHA1))
            {
                vtReport.SHA1 = file.GetSHA1();
            }
            if (string.IsNullOrEmpty(vtReport.SHA256))
            {
                vtReport.SHA256 = file.GetSHA256();
            }

            if (string.IsNullOrEmpty(vtReport.SSDeep))
            {
                file.GetFuzzyHash().SafeFireAndForget();
            }
            vtReport.Size = file.File.Length;
            return data;
        }
        public int CompareTo(object? obj)
        {
            if (obj is FileAnalysisData other)
            {
                return other.MD5.CompareTo(this.MD5);
            }
            return -1;
        }

        public bool Equals(FileAnalysisData? other)
        {
            return this.CompareTo(other) == 0;
        }

        public async Task<bool> Delete()
        {
            if (IsOnViper)
            {
                await ViperUtils.RemoveSample(MD5);
            }

            bool r = false;
            lock (CollectionLock)
            {
                r = Kit.Tools.Container.Get<LiteDatabase>().GetCollection<FileAnalysisData>().Delete(MD5);
            }

            return r;
        }

        public static FileAnalysisData Get(string md5)
        {
            return Tools.Container.Get<LiteDatabase>().GetCollection<FileAnalysisData>()
                .FindById(new BsonValue(md5));
        }
        public static FileAnalysisData Get(FileObject file)
        {
            return Get(file.MD5)
                 ?? FileAnalysisData.GetLocalAnalysisData(file).Save();
        }
        public FileAnalysisData Save()
        {
            lock (CollectionLock)
            {
                Kit.Tools.Container.Get<LiteDatabase>().GetCollection<FileAnalysisData>().Upsert(this); ;
            }
            return this;
        }
    }
}
