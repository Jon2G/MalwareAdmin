using AsyncAwaitBestPractices;
using Kit;
using Kit.Services.Interfaces;
using MalwareAdmin.ViewModels;
using MalwareAdmin.Views;
using System;
using System.IO;
using System.Windows;

namespace MalwareAdmin.Models.Files
{
    public class ZipFileObject : FileObject
    {
        public ZipFileObject(FileInfo file, FolderObject parent) : base(file, parent)
        {

        }
        public ZipFileObject(string Path, FolderObject parent) : base(Path, parent)
        {
        }

        public void UnCompress()
        {
            try
            {
                _UnCompress();
            }
            catch (Exception e)
            {
                Log.Logger.Error(e, "UnCompressing file:{0}", Path);
                MessageBox.Show(e.ToString());
            }
        }

        private void _UnCompress()
        {
            Kit.WPF.ToolsImplementation.Abrir<UnZipProgressView>(
                new UnZipProgressView(this, Unzip), true);
        }
        protected virtual void Unzip(ICrossWindow window, UnZipProgressViewModel model)
        {
            try
            {
                UnZipProgressViewModel.IsUnzipping = true;
                //get the size of the zip file
                model.FileSize = File.Length;
                using (Ionic.Zip.ZipFile zipFile = Ionic.Zip.ZipFile.Read(Path))
                {
                    //reset the bytes total extracted to 0
                    model.ExtractedSizeTotal = 0;
                    int fileAmount = zipFile.Count;
                    int fileIndex = 0;
                    zipFile.ExtractProgress += (s, e) =>
                    {
                        if (e.TotalBytesToTransfer > 0)
                        {
                            model.Progress = (e.BytesTransferred * 1f) / e.TotalBytesToTransfer;
                        }
                    };
                    foreach (Ionic.Zip.ZipEntry ZipEntry in zipFile)
                    {
                        fileIndex++;
                        model.CurrentFile = "(" + fileIndex.ToString() + "/" + fileAmount + "): " + ZipEntry.FileName;
                        //get the size of a single compressed file
                        long compressedSize = ZipEntry.CompressedSize;
                        ZipEntry.Extract(Parent.Path, Ionic.Zip.ExtractExistingFileAction.OverwriteSilently);
                        //calculate the bytes total extracted
                        model.ExtractedSizeTotal += compressedSize;
                        model.GeneralProgress = model.ExtractedSizeTotal * 1f / model.FileSize;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
            finally
            {
                UnZipProgressViewModel.IsUnzipping = false;
                Parent.GetChilds().SafeFireAndForget();
                window?.Close()?.SafeFireAndForget();
            }
        }
    }
}
