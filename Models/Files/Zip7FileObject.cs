using AsyncAwaitBestPractices;
using Kit;
using Kit.Services.Interfaces;
using MalwareAdmin.ViewModels;
using SevenZip;
using System;
using System.IO;
using System.Windows;

namespace MalwareAdmin.Models.Files
{
    public class Zip7FileObject : ZipFileObject
    {
        public Zip7FileObject(FileInfo file, FolderObject parent) : base(file, parent)
        {
        }

        public Zip7FileObject(string Path, FolderObject parent) : base(Path, parent)
        {
        }

        protected override void Unzip(ICrossWindow window, UnZipProgressViewModel model)
        {
            var sevenZipPath = $"{Tools.Instance.LibraryPath}/Dlls/7zip/7z.dll";
            SevenZipBase.SetLibraryPath(sevenZipPath);
            var file = new SevenZipExtractor(Path);
            file.Extracting += (sender, args) =>
            {
                model.Progress = args.PercentDelta;
                model.GeneralProgress = args.PercentDone;
            };
            file.ExtractionFinished += (sender, args) =>
            {
                window?.Close();
                // Do stuff when done
            };
            try
            {
                if (!file.Check())
                {
                    //zip has password so ask for it

                }
                file.ExtractArchive(Parent.Path);
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
                window.Close().SafeFireAndForget();
            }

        }
    }
}
