using AsyncAwaitBestPractices;
using Kit;
using MalwareAdmin.Data;
using MalwareAdmin.Interfaces;
using MalwareAdmin.Popovers;
using MalwareAdmin.Utils;
using SevenZip;
using Tools = Kit.Razor.Tools;

namespace MalwareAdmin.Models.Files
{
    public class Zip7FileObject : ZipFileObject
    {

        public Zip7FileObject(FileInfo file, FolderObject parent) : base(file, parent)
        {
        }

        public Zip7FileObject(string Path, FolderObject parent) : base(Path, parent)
        {
        }
        public override async Task<bool> HasPassword()
        {
            await Task.Yield();
            if (AppData.IsLinux)
            {
                string r7z = await CommandLineUtils.ExecuteAsync($"7z t -pnotsecret \"{Path}\"");
                return !r7z.Contains("Everything is Ok");
            }
            var file = new SevenZipExtractor(Path);
            return !file.Check();
        }
        public override async Task<bool> CheckPassword()
        {
            await Task.Yield();
            if (AppData.IsLinux)
            {
                string r7z = await CommandLineUtils.ExecuteAsync($"7z t -p\"{Password}\" \"{Path}\"");
                return r7z.Contains("Everything is Ok");
            }
            var file = new SevenZipExtractor(Path, Password);
            return file.Check();
        }
        private async Task WinUnzip(IPopover window, UnZipProgressPopover popover)
        {
            await Task.Yield();
            var sevenZipPath = $"{Tools.Instance.LibraryPath}/Dlls/7zip/7z.dll";
            if (!System.IO.File.Exists(sevenZipPath))
            {
                throw new FileNotFoundException(sevenZipPath);
            }
            SevenZipBase.SetLibraryPath(sevenZipPath);
            SevenZipExtractor file = Password is null ? new SevenZipExtractor(Path) : new SevenZipExtractor(Path, Password);
            if (file is not null)
            {
                file.Extracting += (sender, args) =>
                {
                    popover.Progress = args.PercentDelta;
                    popover.GeneralProgress = args.PercentDone;
                };
                file.ExtractionFinished += (s, e) =>
                {
                    window.Close().SafeFireAndForget();
                };
                file.ExtractArchive($"{Parent.Path}/{NameWithoutExtension}");
            }
        }
        private async Task LinuxUnzip(IPopover window, UnZipProgressPopover popover)
        {
            await Task.Yield();
            bool hasPassword = this.Password is not null;
            string r7z = await CommandLineUtils.ExecuteAsync($"7z e \"{Path}\" {(hasPassword ? $"-p\"{Password}\"" : "")} -o\"{Parent.Path}/{this.NameWithoutExtension}\" -y");
            popover.Progress = 100;
            popover.GeneralProgress = 100;
            window.Close().SafeFireAndForget();
        }
        private Task _Unzip(IPopover window, UnZipProgressPopover popover)
        {
            if (AppData.IsLinux)
            {
                return LinuxUnzip(window, popover);
            }
            return WinUnzip(window, popover);
        }
        protected override async Task Unzip(IPopover window, UnZipProgressPopover popover)
        {
            await Task.Yield();
            try
            {
                if (await HasPassword())
                {
                    if (!await AskPassword())
                    {
                        return;
                    }
                }
                await _Unzip(window, popover);
                Parent.GetChilds().SafeFireAndForget();
            }
            catch (Exception ex)
            {
                Log.Logger.Error(ex, "Unzip");
                window.Close().SafeFireAndForget();
            }
        }


    }
}
