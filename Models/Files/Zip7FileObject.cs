using AsyncAwaitBestPractices;
using Kit.Services.Interfaces;
using Kit.WPF;
using MalwareAdmin.ViewModels;
using MalwareAdmin.Views;
using SevenZip;
using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows;

namespace MalwareAdmin.Models.Files
{
    public class Zip7FileObject : ZipFileObject
    {
        public Zip7FileObject(FileInfo file, FolderObject parent) : base(file, parent)
        {
        }

        public Zip7FileObject(string Path, FolderObject parent) : base(Path, parent)
        {
        }

        protected override async void Unzip(ICrossWindow window, UnZipProgressViewModel model)
        {
            try
            {
                var sevenZipPath = $"{Tools.Instance.LibraryPath}/Dlls/7zip/7z.dll";
                SevenZipBase.SetLibraryPath(sevenZipPath);
                SevenZipExtractor file = await FilePasswordCheck(Path);
                if (file is not null)
                {
                    file.Extracting += (sender, args) =>
                    {
                        model.Progress = args.PercentDelta;
                        model.GeneralProgress = args.PercentDone;
                    };
                    file.ExtractionFinished += (s, e) =>
                    {
                        window.Close();
                    };
                    file.ExtractArchive(Parent.Path);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
                window.Close().SafeFireAndForget();
            }

        }

        private async Task<SevenZipExtractor> FilePasswordCheck(string path, string password = null)
        {
            var file = password is null ? new SevenZipExtractor(Path) : new SevenZipExtractor(path, password);
            if (!file.Check())
            {
                //zip has password so ask for it
                ZipPasswordView zuPasswordView = await App.Current.Dispatcher.InvokeAsync(() => Kit.WPF.ToolsImplementation.Abrir<ZipPasswordView>(new ZipPasswordView(), true));
                if (string.IsNullOrEmpty(zuPasswordView.Password))
                {
                    return null;
                }
                return await FilePasswordCheck(path, zuPasswordView.Password);
            }
            return file;
        }
    }
}
