using AsyncAwaitBestPractices;
using Kit;
using MalwareAdmin.Interfaces;
using MalwareAdmin.Popovers;
using Microsoft.AspNetCore.Components;
using SevenZip;
using Tools = Kit.Razor.Tools;

namespace MalwareAdmin.Models.Files
{
    public class Zip7FileObject : ZipFileObject
    {
        public Zip7FileObject(FileInfo file, FolderObject parent) : base(file, parent)
        {
        }

        public Zip7FileObject(string Path, FolderObject parent) : base(Path, parent)
        {
        }

        protected override async Task Unzip(IPopover window, UnZipProgressPopover popover)
        {
            await Task.Yield();
            try
            {
                var sevenZipPath = $"{Tools.Instance.LibraryPath}/Dlls/7zip/7z.dll";
                SevenZipBase.SetLibraryPath(sevenZipPath);
                SevenZipExtractor file = await FilePasswordCheck(Path);
                if (file is not null)
                {
                    file.Extracting += (sender, args) =>
                    {
                        popover.Progress = args.PercentDelta;
                        popover.GeneralProgress = args.PercentDone;
                    };
                    file.ExtractionFinished += (s, e) =>
                    {
                        window.Close().SafeFireAndForget();
                    };
                    file.ExtractArchive(Parent.Path);
                }
            }
            catch (Exception ex)
            {
                Log.Logger.Error(ex, "Unzip");
                window.Close().SafeFireAndForget();
            }

        }

        private async Task<SevenZipExtractor?> FilePasswordCheck(string path, string password = null)
        {
            var file = password is null ? new SevenZipExtractor(Path) : new SevenZipExtractor(path, password);
            if (!file.Check())
            {
                //zip has password so ask for it
                ZipPasswordPopover? zuPasswordView = await Kit.Tools.Container.Get<Radzen.DialogService>().OpenAsync("Archivo protegido por contraseña",
                    childContent:
                    ds =>
                    {
                        RenderFragment content(Type t) => builder =>
                        {
                            builder.OpenComponent<ZipPasswordPopover>(0);
                            builder.CloseComponent();
                        };
                        return content(typeof(ZipPasswordPopover));
                    },
                    new Radzen.DialogOptions()
                    {
                        Resizable = false,
                        Draggable = false,
                        AutoFocusFirstElement = true,
                        CloseDialogOnEsc = false,
                        ShowClose = false,
                        ShowTitle = true,
                        CloseDialogOnOverlayClick = false
                    }) as ZipPasswordPopover;
                if (string.IsNullOrEmpty(zuPasswordView?.Password))
                {
                    return null;
                }
                return await FilePasswordCheck(path, zuPasswordView.Password);
            }
            return file;
        }
    }
}
