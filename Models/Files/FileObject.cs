using AsyncAwaitBestPractices;
using Kit;
using Kit.Enums;
using Kit.Extensions;
using LiteDB;
using MalwareAdmin.Data;
using MalwareAdmin.Utils;
using MalwareAdmin.Views;
using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Media.Imaging;
using VirusTotalNet.Exceptions;
using Tools = Kit.WPF.Tools;

namespace MalwareAdmin.Models.Files
{
    public class FileObject : ObjectExplorer
    {
        public string MD5 { get; set; }
        public bool IsOnViper { get; set; }
        public string Extension { get; set; }
        private bool _IsSelected;
        public bool IsSelected
        {
            get => _IsSelected;
            set => RaiseIfChanged(ref _IsSelected, value);
        }
        public Command<FileObject> OnClickCommand { get; set; }
        public FileInfo File => new FileInfo(Path);
        private FileAnalysisData _AnalysisData;
        public FileAnalysisData AnalysisData
        {
            get => _AnalysisData;
            set
            {
                _AnalysisData = value;
                Raise(() => AnalysisData);
            }
        }
        public string PathForLinux
        {
            get
            {
                var fileInfo = File;
                var directory = fileInfo.Directory;
                string rootLetter = directory.Root.FullName;
                string path = fileInfo.FullName
                    .Replace(rootLetter, "")
                    .Replace("\\", "/");
                rootLetter = rootLetter.Replace(":\\", "").ToLower();
                string pathToFile = $"/mnt/{rootLetter}/{path}";
                return pathToFile;
            }
        }
        public FileObject(string Path, FolderObject parent) : this(new FileInfo(Path), parent)
        {

        }
        public FileObject(FileInfo file, FolderObject parent) : base(parent, file)
        {
            OnClickCommand = new Command<FileObject>(OnClick);
            if (!string.IsNullOrEmpty(file.Extension))
            {
                Extension = file.Extension.Substring(1, file.Extension.Length - 1);
                Icon = GetIcon();
            }
        }
        private void OnClick(FileObject file)
        {
            Parent.RemoveSelection();
            file.IsSelected = true;
        }
        public Task UploadToVT()
        {
            return App.Current.Dispatcher.InvokeAsync(() =>
             {
                 Kit.WPF.ToolsImplementation.Abrir<UploadingFileToVTViewModel>(new UploadingFileToVTViewModel(this),
                     true);
             }).Task;
        }
        public async Task DownloadReportFromVT()
        {
            try
            {
                if (string.IsNullOrEmpty(MD5))
                {
                    GetAnalysisData();
                }

                AnalysisData.VTotalReport =
                    (VirusTotalNet.Results.v3.FileReport)await VirusTotalNet.VirusTotal.V3.GetFileReportAsync(MD5);
                AnalysisData.Save();
            }
            catch (ResourceNotFoundException)
            {
                Tools.Instance.Dialogs.CustomMessageBox.ShowYesNo(
                        "El archivo no existe en la base de datos de VirusTotal.\n¿Desea subirlo y solicitar un escaneo (puede tardar un tiempo)?",
                        "No escaneado por virus total", "Sí", "No")
                    .ContinueWith(t =>
                    {
                        if (t.Result == CustomMessageBoxResult.Yes)
                        {
                            UploadToVT().SafeFireAndForget();
                        }
                    }).SafeFireAndForget();
            }
            catch (Exception ex)
            {
                Log.Logger.Error(ex, "DownloadFromVT:{0}", Path);
            }
        }

        protected override string GetIcon()
        {
            if (Extension is null) return "/Imgs/FileIcons/unknown.png";
            try
            {
                string imgPath = $"/Imgs/FileIcons/{Extension}.png";
                string resourceName = $"pack://application:,,,{imgPath}";
                _ = new BitmapImage(new Uri(resourceName, UriKind.Absolute));
                return imgPath;
            }
            catch (Exception)
            {
                return "/Imgs/FileIcons/unknown.png";
            }
        }
        protected override void _Delete()
        {
            if (File.Exists)
                File.Delete();
        }

        public void GetAnalysisData()
        {
            if (string.IsNullOrEmpty(MD5))
            {
                MD5 = GetMD5();
            }
            AnalysisData = AppData.Database.GetCollection<FileAnalysisData>().FindById(new BsonValue(MD5))
                           ?? FileAnalysisData.GetLocalAnalysisData(this).Save();
            if (!AnalysisData.IsOnViper)
                ViperUtils.Find(this).ContinueWith(t =>
                {
                    if (!t.Result)
                    {
                        ViperUtils.AddToViper(this).SafeFireAndForget();
                        return;
                    }

                    this.AnalysisData.IsOnViper = true;
                    this.AnalysisData.Save();
                });
        }

        public string GetFuzzyHash()
        {
            return HashUtils.GetFuzzyHash(this.File);
        }
        public string GetSHA1()
        {
            return VirusTotalNet.Helpers.HashHelper.GetSha1(this.File);
        }

        public string GetSHA256()
        {
            return VirusTotalNet.Helpers.HashHelper.GetSha256(this.File);
        }
        public string GetMD5()
        {
            return VirusTotalNet.Helpers.HashHelper.GetMd5(this.File);
        }
    }
}
