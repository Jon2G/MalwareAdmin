using AsyncAwaitBestPractices;
using Kit;
using Kit.Extensions;
using MalwareAdmin.ViewModels;
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace MalwareAdmin.Models.Files
{
    public class FolderObject : ObjectExplorer
    {

        public ObservableCollection<ObjectExplorer> Items { get; set; }
        public DirectoryInfo Folder => new DirectoryInfo(Path);
        private FileSystemWatcher FolderSystemWatcher { get; set; }
        public Command<ObjectExplorer> OnExpandedCommand { get; set; }
        public bool IsRoot => Parent is null;
        public FolderObject(string Path, FolderObject parent = null) : this(new DirectoryInfo(Path), parent)
        {

        }

        public FolderObject(DirectoryInfo directory, FolderObject parent = null) : base(parent, directory)
        {

            Items = new ObservableCollection<ObjectExplorer>();
            if (!directory.Exists)
            {
                directory.Create();
            }

            FolderSystemWatcher = new FileSystemWatcher(Path)
            {
                EnableRaisingEvents = true,
                IncludeSubdirectories = false
            };
            FolderSystemWatcher.Deleted += FolderSystemWatcher_Deleted;
            FolderSystemWatcher.Created += FolderSystemWatcher_Created;


        }

        internal void CreateSubDirectory(string name)
        {
            //TODO: validate name?
            try
            {
                if (!Folder.Exists)
                {
                    this.Parent?.GetChilds(true).SafeFireAndForget();
                    return;
                }
                Folder.CreateSubdirectory(name);
            }
            catch (Exception e)
            {
                MessageBox.Show(e.ToString());
            }
        }

        public void ShowInExplorer()
        {
            try
            {
                if (Folder.Exists)
                {
                    Process.Start("explorer.exe", Path);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.ToString());
            }
        }

        public void RemoveSelection()
        {
            Parent?.RemoveSelection();
            foreach (FileObject file in Items)
            {
                file.IsSelected = false;
            }
        }
        private void AddFile(FileInfo file)
        {
            FileObject fileObject;
            switch (file.Extension)
            {
                case ".7z":
                    fileObject = new Zip7FileObject(file, this);
                    break;
                case ".zip":
                    fileObject = new ZipFileObject(file, this);
                    break;
                default:
                    fileObject = new FileObject(file, this);
                    break;
            }
            this.Items.Add(fileObject);
        }

        #region FolderSystemWatcher
        private void FolderSystemWatcher_Created(object sender, FileSystemEventArgs e)
        {
            if (!UnZipProgressViewModel.IsUnzipping)
            {
                try
                {
                    FileAttributes attr = File.GetAttributes(e.FullPath);
                    //detect whether its a directory or file
                    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
                    {
                        DirectoryInfo directoryInfo = new DirectoryInfo(e.FullPath);
                        if (directoryInfo.Exists)
                        {
                            GetChilds(true).SafeFireAndForget();
                        }
                    }
                    else
                    {
                        FileInfo fileInfo = new FileInfo(e.FullPath);
                        if (fileInfo.Exists)
                        {
                            GetChilds().SafeFireAndForget();
                        }
                    }
                }
                catch (Exception ex)
                {
                    Log.Logger.Error(ex, "Getting file info:{0}", e.FullPath);
                }
            }
        }

        private void FolderSystemWatcher_Deleted(object sender, FileSystemEventArgs e)
        {
            if (UnZipProgressViewModel.IsUnzipping || !Folder.Exists)
            {
                return;
            }

            FileInfo file = new FileInfo(e.FullPath);
            if (!file.Exists)
            {
                GetChilds().SafeFireAndForget();
            }
        }

        #endregion

        protected override string GetIcon()
        {
            return $"/Imgs/FileIcons/folder.png";
        }

        private bool IsExpanding;
        public Task GetChilds(bool openTopLevel = true)
        {
            return App.Current.Dispatcher.BeginInvoke(() =>
            {
                try
                {
                    if (IsExpanding)
                    {
                        return;
                    }
                    IsExpanding = true;
                    this.Items.Clear();
                    if (!Folder.Exists)
                    {
                        return;
                    }
                    foreach (DirectoryInfo directory in Folder.GetDirectories())
                    {
                        var folder = new FolderObject(directory, this);
                        this.Items.Add(folder);
                        if (openTopLevel)
                        {
                            folder.GetChilds(false).SafeFireAndForget();
                        }
                    }
                    foreach (FileInfo file in Folder.EnumerateFiles())
                    {
                        AddFile(file);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.ToString());
                }
                finally
                {
                    IsExpanding = false;
                }
            }, DispatcherPriority.Render).Task;
        }

        protected override void _Delete()
        {
            if (Folder.Exists && !IsRoot)
                Folder.Delete(true);
        }
    }
}
