using Kit.Extensions;
using System.Collections.ObjectModel;
using System.IO;
using System.Windows.Threading;

namespace MalwareAdmin.Models.Files
{
    public class FolderObject : ObjectExplorer
    {
        private bool _IsExpanded;
        public bool IsExpanded
        {
            get => _IsExpanded;
            set
            {
                if (RaiseIfChanged(ref _IsExpanded, value))
                {
                    this.Icon = GetIcon();
                }
            }
        }
        public ObservableCollection<ObjectExplorer> Items { get; set; }
        private DirectoryInfo FolderInfo => new DirectoryInfo(Path);
        private FileSystemWatcher FolderSystemWatcher { get; set; }
        public Command<ObjectExplorer> OnExpandedCommand { get; set; }
        public FolderObject(string Path, FolderObject parent = null) : this(new DirectoryInfo(Path), parent)
        {

        }

        public FolderObject(DirectoryInfo directory, FolderObject parent = null) : base(parent, directory)
        {
            OnExpandedCommand = new Command<ObjectExplorer>(OnExpanded);
            Items = new ObservableCollection<ObjectExplorer>();
            if (!directory.Exists)
            {
                directory.Create();
            }

            FolderSystemWatcher = new FileSystemWatcher(Path)
            {
                EnableRaisingEvents = true,
                IncludeSubdirectories = false
            };
            FolderSystemWatcher.Changed += FolderSystemWatcher_Changed;
            FolderSystemWatcher.Deleted += FolderSystemWatcher_Deleted;
            FolderSystemWatcher.Renamed += FolderSystemWatcher_Renamed;
            FolderSystemWatcher.Created += FolderSystemWatcher_Created;


        }

        public void RemoveSelection()
        {
            Parent?.RemoveSelection();
            foreach (FileObject file in Items)
            {
                file.IsSelected = false;
            }
        }
        private void AddFile(FileInfo file)
        {
            App.Current.Dispatcher.BeginInvoke(() =>
            {
                this.Items.Add(new FileObject(file, this));
            }, DispatcherPriority.ApplicationIdle);
        }

        #region FolderSystemWatcher
        private void FolderSystemWatcher_Created(object sender, FileSystemEventArgs e)
        {
            FileInfo fileInfo = new FileInfo(e.FullPath);
            if (fileInfo.Exists)
            {
                this.AddFile(fileInfo);
            }
        }
        private void FolderSystemWatcher_Renamed(object sender, RenamedEventArgs e)
        {
            if (this.Name == e.Name || string.IsNullOrEmpty(e.Name)) return;
            this.Name = e.Name;
            this.Path = e.FullPath;
            if (IsExpanded)
                GetChilds();
        }
        private void FolderSystemWatcher_Deleted(object sender, FileSystemEventArgs e)
        {
            if (!FolderInfo.Exists)
            {

            }
        }

        private void FolderSystemWatcher_Changed(object sender, FileSystemEventArgs e)
        {

        }
        #endregion
        private void OnExpanded(ObjectExplorer objectExplorer)
        {
            FolderObject folder = objectExplorer as FolderObject;
            if (folder is null) return;
            folder.GetChilds();

        }
        protected override string GetIcon()
        {
            return $"/Imgs/FileIcons/folder{(IsExpanded ? "-open" : "")}.png";
        }

        public void GetChilds()
        {
            this.Items.Clear();
            foreach (DirectoryInfo directory in FolderInfo.GetDirectories())
            {
                this.Items.Add(new FolderObject(directory, this));
            }
            foreach (FileInfo file in FolderInfo.EnumerateFiles())
            {
                AddFile(file);
            }
        }
    }
}
