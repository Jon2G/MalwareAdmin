@using MalwareAdmin.Utils
@using Kit
@implements MalwareAdmin.Interfaces.IPopover
@namespace MalwareAdmin.Popovers
@if (Info is not null)
{
    <div style="display: inline-flex">
        <MudIcon Icon="@Icons.Filled.Vaccines" Size="Size.Large" />
        <h6 style="margin: auto"> Ingrese la ruta hacia la carpeta de viper-web:</h6>
    </div>
    <MudTextField Placeholder="" T="string" @bind-Text="@Info.Path" />
    <MudToolBar>
        <MudButton StartIcon="@Icons.Custom.Brands.GitHub" OnClick="CloneViperWeb">Descargar viper-web por mi</MudButton>
    </MudToolBar>
    <MudToolBar>
        <MudButton StartIcon="@Icons.Filled.Folder" OnClick="@Close">Continuar</MudButton>
        <MudSpacer />
        <MudButton StartIcon="@Icons.Filled.Cancel" OnClick="@Cancel" IconColor="Color.Error">Cancelar</MudButton>
    </MudToolBar>
}

@code {
    [Parameter]
    public ViperInfo Info { get; set; }
    [Inject]
    public Radzen.DialogService DialogService { get; set; }

    public void Refresh()
    {
        InvokeAsync(StateHasChanged).SafeFireAndForget();
    }

    public async Task CloneViperWeb()
    {
        await CommandLineUtils.ExecuteAsync($"cd \"{Tools.Instance.LibraryPath}\"","git clone https://github.com/viper-framework/viper-web.git");
        DirectoryInfo directory = new DirectoryInfo($"{Tools.Instance.LibraryPath}/viper-web");
        if (directory.Exists)
        {
            Info.Path = directory.FullName;
        }
    }

    public Task Cancel()
    {
        Info = null;
        return Close();
    }
    public Task Close()
    {
        return Task.Run(() => DialogService.Close(this));
    }

}
