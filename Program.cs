using Blazorise;
using Blazorise.Bootstrap;
using Blazorise.Icons.FontAwesome;
using Kit;
using LiteDB;
using MalwareAdmin.ViewModels;
using Microsoft.AspNetCore.Http.Connections;
using MudBlazor.Services;
using PanoramicData.Blazor.Extensions;
Kit.Razor.Tools.Init();
var builder = WebApplication.CreateBuilder(args);
builder.WebHost.UseDefaultServiceProvider(options => options.ValidateScopes = false);
// Add services to the container.
builder.Services
    .AddBlazorise(options =>
    {
        options.Immediate = true;
    })
    .AddBootstrapProviders()
    .AddFontAwesomeIcons()
    .AddServerSideBlazor();
builder.Services.AddRazorPages();
builder.Services.AddPanoramicDataBlazor();
builder.Services.AddMudServices();
builder.Services.AddScoped<Radzen.DialogService>();

Tools.Container.Register<LiteDatabase>(((container, overloads) =>
{
    string LiteDBPath = $"{Tools.Instance.LibraryPath}/LiteDb/MalwareAdmin";
    FileInfo file = new FileInfo(LiteDBPath);
    if (!file.Directory.Exists)
    {
        file.Directory.Create();
    }
    LiteDatabase database = new LiteDatabase(new ConnectionString()
    {
        Filename = file.FullName,
        Connection = ConnectionType.Shared,
        ReadOnly = false
    });
    Tools.Container.Register(database);
    return database;
}));
Tools.Container.Register(new CommandLineViewModel());
builder.Services.AddSingleton<CommandLineViewModel>((s) => Tools.Container.Get<CommandLineViewModel>()).AddSingleton<LiteDatabase>((s) => Tools.Container.Get<LiteDatabase>());


var app = builder.Build();
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Error");
    // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
    app.UseHsts();
}

app.UseHttpsRedirection();

app.UseStaticFiles();

app.UseRouting();
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllers(); // for download and upload endpoints
    endpoints.MapBlazorHub(options => { options.Transports = HttpTransportType.LongPolling; });
    endpoints.MapFallbackToPage("/_Host");
});

//app.MapBlazorHub();
//app.MapFallbackToPage("/_Host");

app.Run();
